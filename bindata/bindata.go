// Code generated by go-bindata.
// sources:
// go/array_index.tmpl
// go/doc.tmpl
// go/object.tmpl
// go/objects.tmpl
// go/read_array.tmpl
// go/read_bool.tmpl
// go/read_byte.tmpl
// go/read_float64.tmpl
// go/read_int.tmpl
// go/read_int16.tmpl
// go/read_int32.tmpl
// go/read_int64.tmpl
// go/read_int8.tmpl
// go/read_string.tmpl
// go/read_uint.tmpl
// go/read_uint16.tmpl
// go/read_uint32.tmpl
// go/read_uint64.tmpl
// go/read_uint8.tmpl
// go/write_array.tmpl
// go/write_bool.tmpl
// go/write_byte.tmpl
// go/write_float32.tmpl
// go/write_float64.tmpl
// go/write_int.tmpl
// go/write_int16.tmpl
// go/write_int32.tmpl
// go/write_int64.tmpl
// go/write_int8.tmpl
// go/write_string.tmpl
// go/write_uint.tmpl
// go/write_uint16.tmpl
// go/write_uint32.tmpl
// go/write_uint64.tmpl
// go/write_uint8.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goArray_indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x8d\xce\x8c\x05\x04\x00\x00\xff\xff\xf4\xae\xc8\x43\x0c\x00\x00\x00")

func goArray_indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_goArray_indexTmpl,
		"go/array_index.tmpl",
	)
}

func goArray_indexTmpl() (*asset, error) {
	bytes, err := goArray_indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/array_index.tmpl", size: 12, mode: os.FileMode(438), modTime: time.Unix(1469595495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goDocTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x51\x4d\x6b\xa4\x40\x10\x3d\x2b\xf8\x1f\x8a\x39\x2c\x0e\xec\x8c\xec\x65\x0f\x03\x7b\x5d\xf0\xb0\x1f\xec\x92\x5c\x42\x0e\x65\x5b\x6a\x67\xb4\x5b\xba\x5b\x86\x49\xe3\x7f\x4f\x75\xab\xc9\x04\x02\xb9\x59\xaf\xdf\x7b\xf5\xea\x59\x14\xd0\x92\x22\x83\x8e\x6a\xb8\x48\xd7\x41\x35\x35\xba\x7a\x22\xe1\xec\x09\x3a\xe7\x46\x7b\x2a\x8a\x96\x1f\xa6\xea\x28\xf4\x50\x8c\x28\xeb\x96\xe8\x5c\xbc\xf1\xb2\x34\x4b\x47\x14\x67\x6c\x09\xbc\x3f\xfe\x5d\x3e\x7f\xe3\x40\xf3\x9c\xa5\x72\x18\xb5\x71\x90\x67\x69\xe2\xfd\x01\x0c\x2a\xa6\x1d\xcb\x88\xda\x40\x48\x76\x2c\x9a\xe7\xdd\x4a\x20\x55\x07\x74\x9f\xa5\x42\x2b\x1b\x85\x37\xba\x3f\xcb\xca\xa8\x2b\x6b\x16\xfe\xc3\xcb\xb2\x09\x26\xa9\xdc\xb7\xef\xf0\x23\x64\x28\xa3\x87\xf7\x6c\x06\x87\xd5\xce\x5d\xc7\x98\xaf\x54\x8e\x4c\x83\x62\x4d\x08\x72\x9b\xc1\x47\xd3\x7c\xbf\x5a\xf1\xf4\x5f\x3e\x13\xcf\x3c\x86\x27\x7b\x8f\x46\x62\xd5\xd3\x0a\x57\x5a\xf7\x8c\xff\x42\x63\x3b\xec\x73\x6e\x04\x1e\x1e\xab\xab\xa3\xaf\xa0\x9b\x26\xa8\x36\xe9\x9d\x1a\x3e\x25\xc5\xc0\xdb\x81\xdc\x4f\x1f\x72\x37\x93\x12\x21\xf4\x4f\x14\x4e\x9b\xeb\x12\x39\x97\xf5\x1a\x71\xff\xd1\x41\xe1\x0c\xcb\xff\x52\x74\xc0\x44\xff\xbe\xf8\xdb\x02\x05\x5a\xda\xda\x3a\xf1\x9c\x18\x72\x93\x51\xf0\x85\xb1\xc5\xcb\xcf\x51\xfd\x5a\x63\x52\x53\x83\x53\xef\x6e\xd9\x4a\x86\x12\xe6\x78\xc0\x4b\x00\x00\x00\xff\xff\xdc\x7a\x18\x9c\x4f\x02\x00\x00")

func goDocTmplBytes() ([]byte, error) {
	return bindataRead(
		_goDocTmpl,
		"go/doc.tmpl",
	)
}

func goDocTmpl() (*asset, error) {
	bytes, err := goDocTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/doc.tmpl", size: 591, mode: os.FileMode(438), modTime: time.Unix(1469657994, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x8b\xdb\x30\x10\x3d\xb7\xd0\xff\x30\x2c\xa1\x38\x5d\xc7\x34\xdb\x25\x2c\x0b\x39\x05\x0a\x39\x34\x97\x7e\x5c\x4a\x0f\x4a\x3c\x4e\x05\xb2\x9c\x4a\x56\xd3\xd4\xf8\xbf\x77\x24\x7f\xc4\x2a\x8d\xb1\x28\xe4\x60\x4f\xde\xbc\x37\x4f\xd6\x9b\xf2\x72\x42\xa8\xaa\x64\xc7\x72\xac\x6b\xd0\xa5\x32\x87\x12\xaa\x57\x2f\x5f\x54\xd5\x02\x14\x93\x47\x84\xe4\x3d\x47\x91\xea\xba\x76\xd5\x0e\x4a\x4f\x9f\xa8\xb9\xad\x2e\x00\x65\x6a\x9f\xe9\x97\x19\x79\x80\x48\x1d\x7e\xc2\x9b\x1e\x3e\x87\x6d\x1a\xcd\xc1\x70\x59\x2e\x57\x8e\x5f\x61\x69\x94\xb4\x34\xdb\xf1\xc6\x8f\xfc\x37\x52\x2b\x75\xba\x3e\x4d\xaf\xf0\xbc\x86\xb7\x23\x33\x2e\x80\x67\x80\x3f\xc0\x4d\x08\x77\xfb\xa2\x10\x77\xee\x2f\xd7\x7c\xbf\x86\x65\x37\xb4\xd0\xf8\x17\xf6\x52\xe2\x54\x2c\x8d\xe4\x43\x1f\xc7\xa0\x4f\x01\xb4\xcb\x95\x0f\x7e\x18\x03\xbf\x7b\x08\x98\x62\xf5\xe8\x83\x9f\x6e\x82\x4d\x80\x3d\x13\xe2\xcf\x04\x19\x34\x41\x0e\x4d\x90\xc5\x4c\x14\x2c\x80\xdc\xc1\xa7\xb3\x53\x98\xb8\x3c\xfa\x68\x81\xd2\x5e\xf0\x64\x70\xbf\xef\xaf\xe6\x9b\x08\x79\xcf\x6d\x4c\x6c\xff\x58\xb8\xf4\x17\xa6\x38\xdb\x0b\x6c\xd3\x62\xaf\xbc\x1f\x33\x97\x09\xee\xe1\x20\xa1\x1c\x53\xe2\xed\x06\xb0\xe3\xd3\x5b\xc6\xac\x8d\x29\x79\xfe\xc0\x94\xfe\xce\x44\xb4\x37\x19\x7c\xfd\x66\x63\x13\x43\x91\x65\x36\xa7\xd7\xb0\xde\x0a\xe8\x59\xf1\xd2\xc9\xff\xdb\x2d\xf1\x8c\x28\x7f\x96\xf9\xff\x68\x2b\x64\xe9\x44\xe9\x1d\x9e\x7b\xdd\xa8\xaa\x66\x27\xa6\x58\xae\xed\xf6\xe9\x29\x89\xcf\x69\xcc\xb8\x4c\xf1\x57\x0c\x33\x14\x98\x23\x8d\xe0\x83\xe8\xec\x1b\x44\x5d\xc7\x74\xd8\x56\x93\xf8\x5a\x6c\xb2\x21\x05\xb1\x61\xba\xd9\xab\x7d\xb9\xd9\xaf\x2d\x7c\x3e\x38\x83\xe1\x97\x7d\xdd\x57\x6d\xf1\x86\xeb\xeb\xde\x7e\xb6\x1b\x77\xa0\x17\x77\x4d\xdd\x39\x34\xdf\xfc\x4f\x00\x00\x00\xff\xff\x09\xde\xe3\xc5\x18\x06\x00\x00")

func goObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectTmpl,
		"go/object.tmpl",
	)
}

func goObjectTmpl() (*asset, error) {
	bytes, err := goObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/object.tmpl", size: 1560, mode: os.FileMode(438), modTime: time.Unix(1469655034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x28\x4a\xcc\x4b\x4f\x55\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x4f\xca\x4a\x4d\x2e\x51\x82\x49\xe8\x2a\xa4\xe6\xa5\x28\xe8\xd6\xd6\x02\x02\x00\x00\xff\xff\xf4\x69\xbc\xe5\x33\x00\x00\x00")

func goObjectsTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectsTmpl,
		"go/objects.tmpl",
	)
}

func goObjectsTmpl() (*asset, error) {
	bytes, err := goObjectsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/objects.tmpl", size: 51, mode: os.FileMode(438), modTime: time.Unix(1469619563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x89\x45\x45\x89\x95\xc1\x99\x55\xa9\x0a\x7a\xb5\xb5\x40\x41\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xa2\xd4\xc4\x14\x47\x90\xa4\x67\x5e\x4a\x6a\x05\x48\x96\x97\xab\x16\x10\x00\x00\xff\xff\x5c\x45\x45\xe6\x40\x00\x00\x00")

func goRead_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_arrayTmpl,
		"go/read_array.tmpl",
	)
}

func goRead_arrayTmpl() (*asset, error) {
	bytes, err := goRead_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_array.tmpl", size: 64, mode: os.FileMode(438), modTime: time.Unix(1469596041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4c\x53\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xa8\xe6\xe5\xe2\x4c\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x30\xe4\xe5\xaa\x55\x48\xcd\x29\x4e\x45\x97\x30\x00\x4a\xf0\x72\x01\x39\x0a\xda\x40\x55\x80\x00\x00\x00\xff\xff\xaa\x5c\xbc\x9e\x47\x00\x00\x00")

func goRead_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_boolTmpl,
		"go/read_bool.tmpl",
	)
}

func goRead_boolTmpl() (*asset, error) {
	bytes, err := goRead_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_bool.tmpl", size: 71, mode: os.FileMode(438), modTime: time.Unix(1469596147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe5\x02\x8a\x2a\x68\xdb\x2a\x18\xf2\x72\x01\x02\x00\x00\xff\xff\x16\x72\x6d\x67\x24\x00\x00\x00")

func goRead_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_byteTmpl,
		"go/read_byte.tmpl",
	)
}

func goRead_byteTmpl() (*asset, error) {
	bytes, err := goRead_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_byte.tmpl", size: 36, mode: os.FileMode(438), modTime: time.Unix(1469590380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x33\xd1\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\xca\x10\x62\x0a\xda\x0a\x86\x08\x71\x84\x1d\x76\x76\x0a\x16\x28\xaa\x8c\x70\xa8\x32\x34\x43\x51\x66\x8c\x43\x99\x91\x09\x8a\x32\x13\x1c\xca\x8c\x8d\x50\x94\x99\xe2\x50\x66\x62\x80\xa2\xcc\x0c\x97\x32\x54\x2f\x98\xe3\x50\x66\x0a\xf2\x02\x58\x89\xad\x82\x05\x20\x00\x00\xff\xff\x85\x0a\xda\x70\x68\x01\x00\x00")

func goRead_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_float64Tmpl,
		"go/read_float64.tmpl",
	)
}

func goRead_float64Tmpl() (*asset, error) {
	bytes, err := goRead_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_float64.tmpl", size: 360, mode: os.FileMode(438), modTime: time.Unix(1469596167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goRead_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_intTmpl,
		"go/read_int.tmpl",
	)
}

func goRead_intTmpl() (*asset, error) {
	bytes, err := goRead_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469596177, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goRead_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int16Tmpl,
		"go/read_int16.tmpl",
	)
}

func goRead_int16Tmpl() (*asset, error) {
	bytes, err := goRead_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469596198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goRead_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int32Tmpl,
		"go/read_int32.tmpl",
	)
}

func goRead_int32Tmpl() (*asset, error) {
	bytes, err := goRead_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469596206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goRead_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int64Tmpl,
		"go/read_int64.tmpl",
	)
}

func goRead_int64Tmpl() (*asset, error) {
	bytes, err := goRead_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469596213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goRead_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int8Tmpl,
		"go/read_int8.tmpl",
	)
}

func goRead_int8Tmpl() (*asset, error) {
	bytes, err := goRead_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469596188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xc8\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x35\x79\xb9\x52\x50\xb4\xe4\x26\x66\xa7\x6a\x44\xc7\x26\x55\x96\xa4\xea\x28\x20\x4c\x03\xaa\x4b\xce\x2f\xa8\xd4\x40\x28\xd6\x51\x40\x98\x66\x64\x15\x0b\x54\x50\x94\x5c\xa6\x87\x30\xcb\x56\xa1\xb8\xa4\x28\x33\x2f\x1d\x49\x0b\x50\x0d\x58\xbd\x2d\x92\xc1\x20\xdd\x80\x00\x00\x00\xff\xff\xda\x0f\x6a\x28\xb5\x00\x00\x00")

func goRead_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_stringTmpl,
		"go/read_string.tmpl",
	)
}

func goRead_stringTmpl() (*asset, error) {
	bytes, err := goRead_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_string.tmpl", size: 181, mode: os.FileMode(438), modTime: time.Unix(1469658434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goRead_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uintTmpl,
		"go/read_uint.tmpl",
	)
}

func goRead_uintTmpl() (*asset, error) {
	bytes, err := goRead_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469596245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goRead_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint16Tmpl,
		"go/read_uint16.tmpl",
	)
}

func goRead_uint16Tmpl() (*asset, error) {
	bytes, err := goRead_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469596263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goRead_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint32Tmpl,
		"go/read_uint32.tmpl",
	)
}

func goRead_uint32Tmpl() (*asset, error) {
	bytes, err := goRead_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469596268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goRead_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint64Tmpl,
		"go/read_uint64.tmpl",
	)
}

func goRead_uint64Tmpl() (*asset, error) {
	bytes, err := goRead_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469596273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goRead_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint8Tmpl,
		"go/read_uint8.tmpl",
	)
}

func goRead_uint8Tmpl() (*asset, error) {
	bytes, err := goRead_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469596255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x89\x45\x45\x89\x95\xc1\x99\x55\xa9\x0a\x7a\xb5\xb5\x40\x41\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xf2\xa2\xcc\x92\x54\x47\x90\xac\x67\x5e\x4a\x6a\x05\x48\x9a\x97\xab\x16\x10\x00\x00\xff\xff\x98\x85\x36\x2c\x41\x00\x00\x00")

func goWrite_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_arrayTmpl,
		"go/write_array.tmpl",
	)
}

func goWrite_arrayTmpl() (*asset, error) {
	bytes, err := goWrite_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_array.tmpl", size: 65, mode: os.FileMode(438), modTime: time.Unix(1469595995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4c\x53\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xa8\xe6\xe5\xe2\x4c\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x30\xe4\xe5\xaa\x55\x48\xcd\x29\x4e\x45\x97\x30\x00\x4a\xf0\x72\x01\x39\x0a\xda\x40\x55\x80\x00\x00\x00\xff\xff\xaa\x5c\xbc\x9e\x47\x00\x00\x00")

func goWrite_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_boolTmpl,
		"go/write_bool.tmpl",
	)
}

func goWrite_boolTmpl() (*asset, error) {
	bytes, err := goWrite_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_bool.tmpl", size: 71, mode: os.FileMode(438), modTime: time.Unix(1469596087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe5\x02\x8a\x2a\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x18\xd1\xa1\x8d\x22\x00\x00\x00")

func goWrite_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_byteTmpl,
		"go/write_byte.tmpl",
	)
}

func goWrite_byteTmpl() (*asset, error) {
	bytes, err := goWrite_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_byte.tmpl", size: 34, mode: os.FileMode(438), modTime: time.Unix(1469596094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_float32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x36\xd2\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\x10\x66\x21\x24\x15\xb4\x15\x0c\xb1\x28\x50\xb0\xb3\x53\xb0\x40\x51\x65\x84\x43\x95\xa1\x19\x8a\x32\x63\x1c\xca\x8c\x4c\x80\xca\xc0\x4a\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x12\xc3\x21\xb1\xd5\x00\x00\x00")

func goWrite_float32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_float32Tmpl,
		"go/write_float32.tmpl",
	)
}

func goWrite_float32Tmpl() (*asset, error) {
	bytes, err := goWrite_float32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_float32.tmpl", size: 213, mode: os.FileMode(438), modTime: time.Unix(1469592147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x33\xd1\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\xca\x10\x62\x0a\xda\x0a\x86\x08\x71\x84\x1d\x76\x76\x0a\x16\x28\xaa\x8c\x70\xa8\x32\x34\x43\x51\x66\x8c\x43\x99\x91\x09\x8a\x32\x13\x1c\xca\x8c\x8d\x50\x94\x99\xe2\x50\x66\x62\x80\xa2\xcc\x0c\x97\x32\x54\x2f\x98\xe3\x50\x66\x0a\xf2\x02\x58\x89\xad\x82\x05\x20\x00\x00\xff\xff\x85\x0a\xda\x70\x68\x01\x00\x00")

func goWrite_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_float64Tmpl,
		"go/write_float64.tmpl",
	)
}

func goWrite_float64Tmpl() (*asset, error) {
	bytes, err := goWrite_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_float64.tmpl", size: 360, mode: os.FileMode(438), modTime: time.Unix(1469592186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_intTmpl,
		"go/write_int.tmpl",
	)
}

func goWrite_intTmpl() (*asset, error) {
	bytes, err := goWrite_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWrite_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int16Tmpl,
		"go/write_int16.tmpl",
	)
}

func goWrite_int16Tmpl() (*asset, error) {
	bytes, err := goWrite_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int32Tmpl,
		"go/write_int32.tmpl",
	)
}

func goWrite_int32Tmpl() (*asset, error) {
	bytes, err := goWrite_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWrite_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int64Tmpl,
		"go/write_int64.tmpl",
	)
}

func goWrite_int64Tmpl() (*asset, error) {
	bytes, err := goWrite_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWrite_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int8Tmpl,
		"go/write_int8.tmpl",
	)
}

func goWrite_int8Tmpl() (*asset, error) {
	bytes, err := goWrite_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xa9\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\x88\x8e\x4d\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\x83\x8b\x6b\xf2\x72\xe5\xa1\x28\xca\x49\xcd\xd3\x48\x41\x96\x4e\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x00\x6b\xcf\xc3\x22\xa9\xa0\xad\x60\x88\x45\x81\x82\x9d\x9d\x82\x05\x50\x55\x72\x7e\x41\xa5\x06\x42\xa9\x91\x55\xac\x8e\x02\x8a\x1d\x60\x71\x5b\x05\x24\x9d\x40\x55\x80\x00\x00\x00\xff\xff\xfd\xdb\xd6\x26\xbd\x00\x00\x00")

func goWrite_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_stringTmpl,
		"go/write_string.tmpl",
	)
}

func goWrite_stringTmpl() (*asset, error) {
	bytes, err := goWrite_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_string.tmpl", size: 189, mode: os.FileMode(438), modTime: time.Unix(1469592211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uintTmpl,
		"go/write_uint.tmpl",
	)
}

func goWrite_uintTmpl() (*asset, error) {
	bytes, err := goWrite_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWrite_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint16Tmpl,
		"go/write_uint16.tmpl",
	)
}

func goWrite_uint16Tmpl() (*asset, error) {
	bytes, err := goWrite_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint32Tmpl,
		"go/write_uint32.tmpl",
	)
}

func goWrite_uint32Tmpl() (*asset, error) {
	bytes, err := goWrite_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWrite_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint64Tmpl,
		"go/write_uint64.tmpl",
	)
}

func goWrite_uint64Tmpl() (*asset, error) {
	bytes, err := goWrite_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWrite_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint8Tmpl,
		"go/write_uint8.tmpl",
	)
}

func goWrite_uint8Tmpl() (*asset, error) {
	bytes, err := goWrite_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go/array_index.tmpl": goArray_indexTmpl,
	"go/doc.tmpl": goDocTmpl,
	"go/object.tmpl": goObjectTmpl,
	"go/objects.tmpl": goObjectsTmpl,
	"go/read_array.tmpl": goRead_arrayTmpl,
	"go/read_bool.tmpl": goRead_boolTmpl,
	"go/read_byte.tmpl": goRead_byteTmpl,
	"go/read_float64.tmpl": goRead_float64Tmpl,
	"go/read_int.tmpl": goRead_intTmpl,
	"go/read_int16.tmpl": goRead_int16Tmpl,
	"go/read_int32.tmpl": goRead_int32Tmpl,
	"go/read_int64.tmpl": goRead_int64Tmpl,
	"go/read_int8.tmpl": goRead_int8Tmpl,
	"go/read_string.tmpl": goRead_stringTmpl,
	"go/read_uint.tmpl": goRead_uintTmpl,
	"go/read_uint16.tmpl": goRead_uint16Tmpl,
	"go/read_uint32.tmpl": goRead_uint32Tmpl,
	"go/read_uint64.tmpl": goRead_uint64Tmpl,
	"go/read_uint8.tmpl": goRead_uint8Tmpl,
	"go/write_array.tmpl": goWrite_arrayTmpl,
	"go/write_bool.tmpl": goWrite_boolTmpl,
	"go/write_byte.tmpl": goWrite_byteTmpl,
	"go/write_float32.tmpl": goWrite_float32Tmpl,
	"go/write_float64.tmpl": goWrite_float64Tmpl,
	"go/write_int.tmpl": goWrite_intTmpl,
	"go/write_int16.tmpl": goWrite_int16Tmpl,
	"go/write_int32.tmpl": goWrite_int32Tmpl,
	"go/write_int64.tmpl": goWrite_int64Tmpl,
	"go/write_int8.tmpl": goWrite_int8Tmpl,
	"go/write_string.tmpl": goWrite_stringTmpl,
	"go/write_uint.tmpl": goWrite_uintTmpl,
	"go/write_uint16.tmpl": goWrite_uint16Tmpl,
	"go/write_uint32.tmpl": goWrite_uint32Tmpl,
	"go/write_uint64.tmpl": goWrite_uint64Tmpl,
	"go/write_uint8.tmpl": goWrite_uint8Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go": &bintree{nil, map[string]*bintree{
		"array_index.tmpl": &bintree{goArray_indexTmpl, map[string]*bintree{}},
		"doc.tmpl": &bintree{goDocTmpl, map[string]*bintree{}},
		"object.tmpl": &bintree{goObjectTmpl, map[string]*bintree{}},
		"objects.tmpl": &bintree{goObjectsTmpl, map[string]*bintree{}},
		"read_array.tmpl": &bintree{goRead_arrayTmpl, map[string]*bintree{}},
		"read_bool.tmpl": &bintree{goRead_boolTmpl, map[string]*bintree{}},
		"read_byte.tmpl": &bintree{goRead_byteTmpl, map[string]*bintree{}},
		"read_float64.tmpl": &bintree{goRead_float64Tmpl, map[string]*bintree{}},
		"read_int.tmpl": &bintree{goRead_intTmpl, map[string]*bintree{}},
		"read_int16.tmpl": &bintree{goRead_int16Tmpl, map[string]*bintree{}},
		"read_int32.tmpl": &bintree{goRead_int32Tmpl, map[string]*bintree{}},
		"read_int64.tmpl": &bintree{goRead_int64Tmpl, map[string]*bintree{}},
		"read_int8.tmpl": &bintree{goRead_int8Tmpl, map[string]*bintree{}},
		"read_string.tmpl": &bintree{goRead_stringTmpl, map[string]*bintree{}},
		"read_uint.tmpl": &bintree{goRead_uintTmpl, map[string]*bintree{}},
		"read_uint16.tmpl": &bintree{goRead_uint16Tmpl, map[string]*bintree{}},
		"read_uint32.tmpl": &bintree{goRead_uint32Tmpl, map[string]*bintree{}},
		"read_uint64.tmpl": &bintree{goRead_uint64Tmpl, map[string]*bintree{}},
		"read_uint8.tmpl": &bintree{goRead_uint8Tmpl, map[string]*bintree{}},
		"write_array.tmpl": &bintree{goWrite_arrayTmpl, map[string]*bintree{}},
		"write_bool.tmpl": &bintree{goWrite_boolTmpl, map[string]*bintree{}},
		"write_byte.tmpl": &bintree{goWrite_byteTmpl, map[string]*bintree{}},
		"write_float32.tmpl": &bintree{goWrite_float32Tmpl, map[string]*bintree{}},
		"write_float64.tmpl": &bintree{goWrite_float64Tmpl, map[string]*bintree{}},
		"write_int.tmpl": &bintree{goWrite_intTmpl, map[string]*bintree{}},
		"write_int16.tmpl": &bintree{goWrite_int16Tmpl, map[string]*bintree{}},
		"write_int32.tmpl": &bintree{goWrite_int32Tmpl, map[string]*bintree{}},
		"write_int64.tmpl": &bintree{goWrite_int64Tmpl, map[string]*bintree{}},
		"write_int8.tmpl": &bintree{goWrite_int8Tmpl, map[string]*bintree{}},
		"write_string.tmpl": &bintree{goWrite_stringTmpl, map[string]*bintree{}},
		"write_uint.tmpl": &bintree{goWrite_uintTmpl, map[string]*bintree{}},
		"write_uint16.tmpl": &bintree{goWrite_uint16Tmpl, map[string]*bintree{}},
		"write_uint32.tmpl": &bintree{goWrite_uint32Tmpl, map[string]*bintree{}},
		"write_uint64.tmpl": &bintree{goWrite_uint64Tmpl, map[string]*bintree{}},
		"write_uint8.tmpl": &bintree{goWrite_uint8Tmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

