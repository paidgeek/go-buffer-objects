// Code generated by go-bindata.
// sources:
// go/array_index.tmpl
// go/doc.tmpl
// go/object.tmpl
// go/objects.tmpl
// go/read_array.tmpl
// go/read_bool.tmpl
// go/read_byte.tmpl
// go/read_float32.tmpl
// go/read_float64.tmpl
// go/read_int.tmpl
// go/read_int16.tmpl
// go/read_int32.tmpl
// go/read_int64.tmpl
// go/read_int8.tmpl
// go/read_string.tmpl
// go/read_uint.tmpl
// go/read_uint16.tmpl
// go/read_uint32.tmpl
// go/read_uint64.tmpl
// go/read_uint8.tmpl
// go/write_array.tmpl
// go/write_bool.tmpl
// go/write_byte.tmpl
// go/write_float32.tmpl
// go/write_float64.tmpl
// go/write_int.tmpl
// go/write_int16.tmpl
// go/write_int32.tmpl
// go/write_int64.tmpl
// go/write_int8.tmpl
// go/write_string.tmpl
// go/write_uint.tmpl
// go/write_uint16.tmpl
// go/write_uint32.tmpl
// go/write_uint64.tmpl
// go/write_uint8.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goArray_indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x8d\xce\x8c\x05\x04\x00\x00\xff\xff\xf4\xae\xc8\x43\x0c\x00\x00\x00")

func goArray_indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_goArray_indexTmpl,
		"go/array_index.tmpl",
	)
}

func goArray_indexTmpl() (*asset, error) {
	bytes, err := goArray_indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/array_index.tmpl", size: 12, mode: os.FileMode(438), modTime: time.Unix(1469595495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goDocTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xda\x40\x10\x3d\x83\xc4\x7f\x98\x72\x88\x8c\x42\x80\xd0\xa8\xaa\x50\x88\xd4\x4a\x89\xc4\x21\x49\x95\x36\xcd\x21\xe2\xb0\xd8\x6b\x70\x03\xbb\x68\xbd\x94\xa6\xd4\xff\xbd\x33\x3b\x36\xd8\xe6\x2b\xbd\x34\x97\x78\xe7\x6b\xdf\xbc\x79\xb3\x49\xbb\x0d\x63\xa9\xa4\x11\x56\x06\xb0\x8c\xec\x04\x46\x8b\x50\x8f\x7e\x48\xdf\xc6\x3d\x98\x58\x3b\x8f\x7b\xed\xf6\x18\x1d\x8b\x51\xcb\xd7\xb3\xf6\x5c\x44\xc1\x58\xca\x97\xf6\x26\xae\x56\xad\x55\xe7\xc2\x7f\x11\x63\x09\xab\x55\xeb\x0b\x7f\xde\x89\x99\x4c\x92\x5a\x35\x9a\xcd\xb5\xb1\xe0\xd5\xaa\x95\x7a\xa4\xeb\xf4\x4b\x1a\xa3\x4d\x4c\x9f\xab\xd5\x19\x18\xa1\x30\xb1\x35\x70\x71\x31\xa5\x54\xea\x58\x26\x49\xb2\x00\xa9\x02\xb2\x36\x6a\x55\x5f\xab\xd8\x95\xba\x15\xbf\xbe\x46\xbf\x25\xf4\xe9\x42\x3c\xdc\x3b\x24\x64\xa2\xc8\x5c\x55\x76\x70\xd5\x41\x80\xc1\x0f\x62\xc9\xc8\x60\x11\x29\x7b\xfe\x81\x4b\x0c\x82\x2c\x0f\x2f\x83\xb3\xf4\xba\x9f\xc2\x38\xdc\xd7\xc6\x3c\xaa\x17\xa5\x97\x8a\xcb\x61\x0e\xb7\xd0\xba\x93\x4b\xaf\xbe\x60\x1f\x30\x1d\xf5\x86\xcb\xb5\xaf\x73\xc7\xc6\x40\x59\x69\x42\xe1\xa7\x7c\x40\x94\x9d\x61\xe5\x20\x79\x8d\x14\x08\x9e\x08\x3f\x9e\xf1\x48\xae\xf8\xbb\x30\x91\x18\x4d\x65\x6a\x1e\x69\x3d\x45\xfb\xad\x30\xf1\x44\x4c\x3f\xeb\xe0\xd5\xc3\x19\xc0\xf3\x70\xf4\x6a\x65\x13\x74\x18\x52\x66\x96\xfe\xa8\x66\x6f\x0a\x74\x6d\x67\x34\xe1\x0c\xa6\xd4\x7b\xb8\x50\x3e\x60\x6f\xdb\xf8\x9f\x50\x09\x08\x3a\x0a\x52\xd4\x8d\x5d\x3d\x52\x67\x31\x8a\xc9\x9f\x00\x06\xae\x8a\x73\xce\x4f\xc4\x17\xb1\xcc\xe8\xef\xe1\xb9\x62\xa4\x5d\x18\x05\x27\x68\xe3\x5a\xab\xc4\x65\xaf\xa7\x52\x09\x64\x28\x16\x53\x9b\x8f\x56\x11\xf1\x92\xb8\x5e\x1c\xf2\x27\x13\x59\xb9\x8d\xeb\x93\xf5\xf4\x0e\xb8\x4d\xd8\xb0\xd3\x00\x4f\x31\x39\x84\x1a\xc1\xf7\xfa\xa0\x5b\x34\x25\x3c\x62\xd8\x73\x67\x88\xc3\xa7\x48\xa4\x20\xb3\x9d\xe7\x6c\x70\x75\x05\x1f\xc9\x11\x85\x94\x58\x9e\x21\x55\xad\xc4\xa4\x5c\x57\x98\xad\x64\xa3\x3a\xdd\x75\x1d\x8a\x40\x33\xb8\x1f\x72\xbd\x2f\xb8\xd6\x97\x54\x14\x50\x99\x92\x24\x9a\x70\x41\xce\x04\xe4\x34\x66\x99\xed\x8b\xeb\x36\x98\xb8\x35\x93\x47\x39\xfc\xa6\x8f\x72\xd8\x84\x25\x44\xba\xe5\x0a\x98\x8c\xd0\x26\x6d\x0c\x6f\x0d\xb3\x50\x26\x01\x4e\xa1\xfb\x06\xda\x4e\xfb\x2e\x2c\x61\xea\x89\x14\x64\xa7\x47\xae\x21\x9a\x0e\x0c\xde\x21\xa4\x76\xad\xb6\x62\x4a\x37\x77\xf0\x10\x6a\x03\x6c\xb8\x04\x57\xff\xe4\xc4\x01\xed\xf7\x49\x55\x29\x77\x8c\xbd\x0f\x4b\xee\x89\xa8\x7b\x76\x49\xbd\xa1\x1b\x02\x17\x40\x64\xaa\xc8\xa6\xb3\xbb\xe4\x0d\xad\x0f\x52\x04\x3b\x01\x16\x34\xb8\x8b\xe2\xbc\x24\x79\xf7\xbc\x54\x90\x7f\xc0\x4b\x65\x78\x79\x89\xba\x20\x4c\x1a\xe1\x1e\xde\xdf\x4c\xa3\x85\x56\xcb\x0b\x75\x68\x1c\x1b\xfa\x2f\x7a\xc3\x92\xdc\x36\xbe\x2e\xfb\x08\x52\x6b\xeb\x49\x6a\x42\x87\x55\x9e\xde\xab\x8f\xf1\x74\x63\xf4\xac\xf0\x96\x19\x52\x1a\xc5\x3a\xa5\xed\x56\x66\x49\x78\x05\x06\xe9\x7e\x5c\x8e\x54\x0d\x7b\xa5\xd1\x3d\xa8\x0b\xe3\x10\xe4\x64\xd1\xdd\xa3\x0b\x64\x93\x32\xde\x71\x91\xb4\x24\x9e\xb0\x87\xeb\xfb\x9b\xf2\x08\x52\xe5\x70\x66\x00\xff\x63\xea\x4d\x28\xff\xa9\x4b\xef\xcf\xb6\xb5\x73\x58\x13\xdc\x31\x87\xb9\x37\xc7\x7d\x1c\x65\xf2\x38\x95\x45\x2e\x1d\xa4\x12\x9b\x5c\x68\x9b\x3d\x8e\x8d\xf9\x9f\x05\x24\xf0\x00\x7d\x79\x05\xa7\x09\xb9\x27\x3a\x59\x0b\x84\xdb\xca\xda\xfb\xa7\x27\x64\xab\x3f\xf7\x72\xbd\x45\x2d\x07\xc4\xb1\x77\xb3\xb2\x78\x7c\xfc\xdc\x4a\x63\xf0\xdf\x00\x00\x00\xff\xff\xe4\x26\x08\xf8\xf0\x09\x00\x00")

func goDocTmplBytes() ([]byte, error) {
	return bindataRead(
		_goDocTmpl,
		"go/doc.tmpl",
	)
}

func goDocTmpl() (*asset, error) {
	bytes, err := goDocTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/doc.tmpl", size: 2544, mode: os.FileMode(438), modTime: time.Unix(1469670942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x8b\xdb\x30\x10\x3d\xb7\xd0\xff\x30\x2c\xa1\x38\x5d\xc7\x34\xdb\x25\x2c\x0b\x7b\x69\xa0\x90\x43\x73\xe9\xc7\xa5\xf4\xa0\xc4\xe3\x54\x20\xcb\xa9\x64\x35\x4d\x8d\xff\x7b\x47\xf2\x47\xac\xd2\x18\x8b\x05\x1f\xa4\xf1\x9b\x37\xf3\x24\xbd\x29\xcf\x47\x84\xaa\x4a\xb6\x2c\xc7\xba\x06\x5d\x2a\xb3\x2f\xa1\x7a\xf5\xf2\x45\x55\x2d\x40\x31\x79\x40\x48\x3e\x70\x14\xa9\xae\x6b\x17\xed\xa0\xb4\xfa\x4c\xc9\x6d\x74\x01\x28\x53\xbb\xa6\x2f\x33\x72\x0f\x91\xda\xff\x82\x37\x3d\x7c\x0e\x9b\x34\x9a\x83\xe1\xb2\x5c\xae\x1c\xbf\xc2\xd2\x28\x69\x69\x36\xe3\x89\x9f\xf8\x1f\xa4\x54\xca\x74\x79\x9a\xb6\xf0\xf8\x04\x6f\x47\x7a\x5c\x00\xcf\x00\x7f\x82\xeb\x10\x6e\x76\x45\x21\x6e\xdc\x2f\x97\x7c\xfb\x04\xcb\xae\x69\xa1\xf1\x1f\xec\xb9\xc4\xa9\x58\x6a\xc9\x87\xde\x8f\x41\x1f\x02\x68\x97\x2b\x1f\x7c\x37\x06\x7e\x77\x17\xd0\xc5\xea\xde\x07\x3f\x5c\x05\x9b\x00\x79\x26\x44\x9f\x09\x12\x68\x82\x14\x9a\x20\x89\x99\x28\x58\x00\xb9\x83\x4f\x67\x27\x33\x71\x79\xf0\xd1\x02\xa5\x7d\xe0\xc9\xe0\x7d\xdf\x5e\xc4\x37\x16\xf2\xd6\xad\x4d\x6c\xfe\x98\xb9\xf4\x57\xa6\x38\xdb\x09\x6c\xdd\x62\x9f\xbc\x6f\x33\xe7\x09\xee\xe1\x20\x21\x1f\x93\xe3\xed\x04\xb0\xed\xd3\x2e\x63\x56\xc6\x14\x3f\x7f\x64\x4a\xff\x60\xe2\x7d\x91\x9e\xa3\x9d\xc9\xe0\xdb\x77\x6b\x9d\x18\x8a\x2c\xb3\x5e\xbd\x18\xf6\x9a\x49\x4f\x8a\x97\xae\x85\xff\x2b\x26\x9e\x91\xea\x5f\x64\xfe\xdc\xfa\x0a\x59\x3a\xb1\xfc\x16\x4f\x7d\xed\xa8\xaa\x66\x47\xa6\x58\xae\xed\x14\xea\x29\x89\xcf\xd5\x98\x71\x99\xe2\xef\x18\x66\x28\x30\x47\x6a\xc1\x07\xd1\x1d\x34\x88\xba\x8e\xe9\xd0\x6d\x4d\xe2\x6b\xb1\xc9\x9a\x2a\x88\x35\xd3\xcd\x7c\xed\xc3\xcd\x9c\x6d\xe1\xf3\xc1\x39\x0c\x6f\xf8\x75\x1f\xb5\xc1\x2b\xaa\x2f\xf3\xfb\xd1\x4e\xde\x41\xbd\xb8\x4b\xea\xce\xa1\xb9\xfb\xbf\x01\x00\x00\xff\xff\xbb\xcc\xe3\xa4\x20\x06\x00\x00")

func goObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectTmpl,
		"go/object.tmpl",
	)
}

func goObjectTmpl() (*asset, error) {
	bytes, err := goObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/object.tmpl", size: 1568, mode: os.FileMode(438), modTime: time.Unix(1469670913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x28\x4a\xcc\x4b\x4f\x55\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x4f\xca\x4a\x4d\x2e\x51\x82\x49\xe8\x2a\xa4\xe6\xa5\x28\xe8\xd6\xd6\x02\x02\x00\x00\xff\xff\xf4\x69\xbc\xe5\x33\x00\x00\x00")

func goObjectsTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectsTmpl,
		"go/objects.tmpl",
	)
}

func goObjectsTmpl() (*asset, error) {
	bytes, err := goObjectsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/objects.tmpl", size: 51, mode: os.FileMode(438), modTime: time.Unix(1469619563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x89\x45\x45\x89\x95\xc1\x99\x55\xa9\x0a\x7a\xb5\xb5\x40\x41\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xa2\xd4\xc4\x14\x47\x90\xa4\x67\x5e\x4a\x6a\x05\x48\x96\x97\xab\x16\x10\x00\x00\xff\xff\x5c\x45\x45\xe6\x40\x00\x00\x00")

func goRead_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_arrayTmpl,
		"go/read_array.tmpl",
	)
}

func goRead_arrayTmpl() (*asset, error) {
	bytes, err := goRead_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_array.tmpl", size: 64, mode: os.FileMode(438), modTime: time.Unix(1469596041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xb0\xb5\x55\x30\xe4\xe5\x02\xb2\x15\xb4\x81\x2c\x40\x00\x00\x00\xff\xff\x73\x7f\x21\x1d\x2d\x00\x00\x00")

func goRead_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_boolTmpl,
		"go/read_bool.tmpl",
	)
}

func goRead_boolTmpl() (*asset, error) {
	bytes, err := goRead_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_bool.tmpl", size: 45, mode: os.FileMode(438), modTime: time.Unix(1469673122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\x68\x49\x01\xd1\x28\x00\x00\x00")

func goRead_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_byteTmpl,
		"go/read_byte.tmpl",
	)
}

func goRead_byteTmpl() (*asset, error) {
	bytes, err := goRead_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_byte.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469673128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_float32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\x28\xcd\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x53\xd0\x56\x30\x88\xd5\x54\xb0\xb1\x51\x30\xd0\x54\xa8\xe1\xe5\xe2\x04\x02\x05\x2c\x8a\x0c\x21\x8a\x2c\xf0\x2a\x32\x82\x28\x32\x34\xc3\xab\xca\x18\xa2\xca\xc8\x44\x93\x97\xab\x28\xb9\x4c\x0f\xe1\x3c\x5b\x05\x2d\x0d\xad\xb4\x9c\xfc\x44\xa0\x06\x4d\x8d\xd2\xbc\xe2\xc4\xb4\x54\xbd\x80\x7c\xa0\x01\xa9\x45\x1a\x6a\x08\x7f\x68\x02\x75\x82\xcd\xb2\x55\x30\x01\x04\x00\x00\xff\xff\x3a\xb1\x43\xaf\xde\x00\x00\x00")

func goRead_float32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_float32Tmpl,
		"go/read_float32.tmpl",
	)
}

func goRead_float32Tmpl() (*asset, error) {
	bytes, err := goRead_float32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_float32.tmpl", size: 222, mode: os.FileMode(438), modTime: time.Unix(1469673556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\x28\xcd\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x53\xd0\x56\x30\x88\xd5\x54\xb0\xb1\x51\x30\xd0\x54\xa8\xe1\xe5\xe2\x04\x02\x05\x2c\x8a\x0c\x21\x8a\x2c\xf0\x2a\x32\x82\x28\x32\x34\xc3\xab\xca\x18\xa2\xca\xc8\x04\xaf\x2a\x13\x88\x2a\x63\x23\x98\x2a\x05\x05\xac\xea\x4c\x21\xea\x4c\x0c\x08\xa8\x33\x83\xaa\xb3\x20\xa0\xce\x1c\xa2\xce\xd4\x4c\x93\x97\xab\x28\xb9\x4c\x0f\x11\x78\xb6\x0a\x5a\x1a\x5a\x69\x39\xf9\x89\x40\x0d\x9a\x1a\xa5\x79\xc5\x89\x69\xa9\x7a\x01\xf9\x40\x03\x52\x8b\x34\xd4\x10\xa1\xac\x09\xd4\x09\x36\xcb\x56\xc1\x02\x10\x00\x00\xff\xff\x7e\x67\xd6\xeb\x7c\x01\x00\x00")

func goRead_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_float64Tmpl,
		"go/read_float64.tmpl",
	)
}

func goRead_float64Tmpl() (*asset, error) {
	bytes, err := goRead_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_float64.tmpl", size: 380, mode: os.FileMode(438), modTime: time.Unix(1469673649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x4d\x4d\x5e\x2e\xb0\x88\xad\x82\x09\x20\x00\x00\xff\xff\x6d\xca\x70\xe2\x6b\x00\x00\x00")

func goRead_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_intTmpl,
		"go/read_int.tmpl",
	)
}

func goRead_intTmpl() (*asset, error) {
	bytes, err := goRead_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int.tmpl", size: 107, mode: os.FileMode(438), modTime: time.Unix(1469673386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x34\xd3\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x35\x79\xb9\xc0\x02\xb6\x0a\x46\x80\x00\x00\x00\xff\xff\xca\x06\x97\x79\x3f\x00\x00\x00")

func goRead_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int16Tmpl,
		"go/read_int16.tmpl",
	)
}

func goRead_int16Tmpl() (*asset, error) {
	bytes, err := goRead_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int16.tmpl", size: 63, mode: os.FileMode(438), modTime: time.Unix(1469673203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x4d\x4d\x5e\x2e\xb0\x88\xad\x82\x09\x20\x00\x00\xff\xff\x7a\x10\xcf\xa1\x6d\x00\x00\x00")

func goRead_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int32Tmpl,
		"go/read_int32.tmpl",
	)
}

func goRead_int32Tmpl() (*asset, error) {
	bytes, err := goRead_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int32.tmpl", size: 109, mode: os.FileMode(438), modTime: time.Unix(1469673381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x34\x61\x13\xb0\xb0\xb1\x11\x9a\xb0\x29\x58\xd8\xc4\x00\x4d\xd8\x0c\x22\x8c\x6e\xa5\x39\x58\xd8\xd4\x4c\x53\x93\x97\x0b\x2c\x62\xab\x60\x01\x08\x00\x00\xff\xff\x1a\x96\x37\x7d\xc9\x00\x00\x00")

func goRead_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int64Tmpl,
		"go/read_int64.tmpl",
	)
}

func goRead_int64Tmpl() (*asset, error) {
	bytes, err := goRead_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int64.tmpl", size: 201, mode: os.FileMode(438), modTime: time.Unix(1469673425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\xb1\xd0\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\x52\x13\x0d\x3b\x28\x00\x00\x00")

func goRead_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_int8Tmpl,
		"go/read_int8.tmpl",
	)
}

func goRead_int8Tmpl() (*asset, error) {
	bytes, err := goRead_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469673163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xc8\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x35\x79\xb9\x52\x50\xb4\xe4\x26\x66\xa7\x6a\x44\xc7\x26\x55\x96\xa4\xea\x28\x20\x4c\x03\xaa\x4b\xce\x2f\xa8\xd4\x40\x28\xd6\x51\x40\x98\x66\x64\x15\x0b\x54\x50\x94\x5c\xa6\x87\x30\xcb\x56\xa1\xb8\xa4\x28\x33\x2f\x1d\x49\x0b\x50\x0d\x58\xbd\x2d\x92\xc1\x20\xdd\x80\x00\x00\x00\xff\xff\xda\x0f\x6a\x28\xb5\x00\x00\x00")

func goRead_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_stringTmpl,
		"go/read_string.tmpl",
	)
}

func goRead_stringTmpl() (*asset, error) {
	bytes, err := goRead_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_string.tmpl", size: 181, mode: os.FileMode(438), modTime: time.Unix(1469658434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x4d\x4d\x5e\x2e\xb0\x88\xad\x82\x09\x20\x00\x00\xff\xff\x09\x05\xe6\x2c\x6c\x00\x00\x00")

func goRead_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uintTmpl,
		"go/read_uint.tmpl",
	)
}

func goRead_uintTmpl() (*asset, error) {
	bytes, err := goRead_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint.tmpl", size: 108, mode: os.FileMode(438), modTime: time.Unix(1469673395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x34\xd3\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x35\x79\xb9\xc0\x02\xb6\x0a\x46\x80\x00\x00\x00\xff\xff\x72\xb6\x9c\xfc\x40\x00\x00\x00")

func goRead_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint16Tmpl,
		"go/read_uint16.tmpl",
	)
}

func goRead_uint16Tmpl() (*asset, error) {
	bytes, err := goRead_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint16.tmpl", size: 64, mode: os.FileMode(438), modTime: time.Unix(1469673404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x4d\x4d\x5e\x2e\xb0\x88\xad\x82\x09\x20\x00\x00\xff\xff\x6e\xaf\x85\xab\x6e\x00\x00\x00")

func goRead_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint32Tmpl,
		"go/read_uint32.tmpl",
	)
}

func goRead_uint32Tmpl() (*asset, error) {
	bytes, err := goRead_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint32.tmpl", size: 110, mode: os.FileMode(438), modTime: time.Unix(1469673409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xa8\x51\x80\xb1\x15\xb4\x15\x0c\x63\x15\x6c\x6c\x14\x2c\x34\x51\x45\x8d\xc0\xa2\x86\x66\x68\xc2\xc6\x60\x61\x23\x13\x34\x61\x13\xb0\xb0\xb1\x11\x9a\xb0\x29\x58\xd8\xc4\x00\x4d\xd8\x0c\x22\x8c\x6e\xa5\x39\x58\xd8\xd4\x4c\x53\x93\x97\x0b\x2c\x62\xab\x60\x01\x08\x00\x00\xff\xff\x8f\x83\xc7\xc2\xca\x00\x00\x00")

func goRead_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint64Tmpl,
		"go/read_uint64.tmpl",
	)
}

func goRead_uint64Tmpl() (*asset, error) {
	bytes, err := goRead_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint64.tmpl", size: 202, mode: os.FileMode(438), modTime: time.Unix(1469673416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goRead_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\xb1\xd0\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\xf7\xbd\xd7\x31\x29\x00\x00\x00")

func goRead_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goRead_uint8Tmpl,
		"go/read_uint8.tmpl",
	)
}

func goRead_uint8Tmpl() (*asset, error) {
	bytes, err := goRead_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read_uint8.tmpl", size: 41, mode: os.FileMode(438), modTime: time.Unix(1469673400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x89\x45\x45\x89\x95\xc1\x99\x55\xa9\x0a\x7a\xb5\xb5\x40\x41\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xf2\xa2\xcc\x92\x54\x47\x90\xac\x67\x5e\x4a\x6a\x05\x48\x9a\x97\xab\x16\x10\x00\x00\xff\xff\x98\x85\x36\x2c\x41\x00\x00\x00")

func goWrite_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_arrayTmpl,
		"go/write_array.tmpl",
	)
}

func goWrite_arrayTmpl() (*asset, error) {
	bytes, err := goWrite_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_array.tmpl", size: 65, mode: os.FileMode(438), modTime: time.Unix(1469595995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4c\x53\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xa8\xe6\xe5\xe2\x4c\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x30\xe4\xe5\xaa\x55\x48\xcd\x29\x4e\x45\x97\x30\x00\x4a\xf0\x72\x01\x39\x0a\xda\x40\x55\x80\x00\x00\x00\xff\xff\xaa\x5c\xbc\x9e\x47\x00\x00\x00")

func goWrite_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_boolTmpl,
		"go/write_bool.tmpl",
	)
}

func goWrite_boolTmpl() (*asset, error) {
	bytes, err := goWrite_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_bool.tmpl", size: 71, mode: os.FileMode(438), modTime: time.Unix(1469596087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe5\x02\x8a\x2a\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x18\xd1\xa1\x8d\x22\x00\x00\x00")

func goWrite_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_byteTmpl,
		"go/write_byte.tmpl",
	)
}

func goWrite_byteTmpl() (*asset, error) {
	bytes, err := goWrite_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_byte.tmpl", size: 34, mode: os.FileMode(438), modTime: time.Unix(1469596094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_float32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x36\xd2\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\x10\x66\x21\x24\x15\xb4\x15\x0c\xb1\x28\x50\xb0\xb3\x53\xb0\x40\x51\x65\x84\x43\x95\xa1\x19\x8a\x32\x63\x1c\xca\x8c\x4c\x80\xca\xc0\x4a\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x12\xc3\x21\xb1\xd5\x00\x00\x00")

func goWrite_float32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_float32Tmpl,
		"go/write_float32.tmpl",
	)
}

func goWrite_float32Tmpl() (*asset, error) {
	bytes, err := goWrite_float32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_float32.tmpl", size: 213, mode: os.FileMode(438), modTime: time.Unix(1469592147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x33\xd1\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\x10\x66\x21\x24\x15\xb4\x15\x0c\xb1\x28\x50\xb0\xb3\x53\xb0\x40\x51\x65\x84\x43\x95\xa1\x19\x8a\x32\x63\x1c\xca\x8c\x4c\x50\x94\x99\xe0\x50\x66\x6c\x84\xa2\xcc\x14\x87\x32\x13\x03\x14\x65\x66\xb8\x94\xa1\x7a\xc1\x1c\x87\x32\x53\x90\x17\xc0\x4a\x6c\x15\x2c\x00\x01\x00\x00\xff\xff\x4c\x01\x5b\x05\x71\x01\x00\x00")

func goWrite_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_float64Tmpl,
		"go/write_float64.tmpl",
	)
}

func goWrite_float64Tmpl() (*asset, error) {
	bytes, err := goWrite_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_float64.tmpl", size: 369, mode: os.FileMode(438), modTime: time.Unix(1469658672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_intTmpl,
		"go/write_int.tmpl",
	)
}

func goWrite_intTmpl() (*asset, error) {
	bytes, err := goWrite_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWrite_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int16Tmpl,
		"go/write_int16.tmpl",
	)
}

func goWrite_int16Tmpl() (*asset, error) {
	bytes, err := goWrite_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int32Tmpl,
		"go/write_int32.tmpl",
	)
}

func goWrite_int32Tmpl() (*asset, error) {
	bytes, err := goWrite_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWrite_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int64Tmpl,
		"go/write_int64.tmpl",
	)
}

func goWrite_int64Tmpl() (*asset, error) {
	bytes, err := goWrite_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWrite_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_int8Tmpl,
		"go/write_int8.tmpl",
	)
}

func goWrite_int8Tmpl() (*asset, error) {
	bytes, err := goWrite_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xa9\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\x88\x8e\x4d\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\x83\x8b\x6b\xf2\x72\xe5\xa1\x28\xca\x49\xcd\xd3\x48\x41\x96\x4e\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x00\x6b\xcf\xc3\x22\xa9\xa0\xad\x60\x88\x45\x81\x82\x9d\x9d\x82\x05\x50\x55\x72\x7e\x41\xa5\x06\x42\xa9\x91\x55\xac\x8e\x02\x8a\x1d\x60\x71\x5b\x05\x24\x9d\x40\x55\x80\x00\x00\x00\xff\xff\xfd\xdb\xd6\x26\xbd\x00\x00\x00")

func goWrite_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_stringTmpl,
		"go/write_string.tmpl",
	)
}

func goWrite_stringTmpl() (*asset, error) {
	bytes, err := goWrite_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_string.tmpl", size: 189, mode: os.FileMode(438), modTime: time.Unix(1469592211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uintTmpl,
		"go/write_uint.tmpl",
	)
}

func goWrite_uintTmpl() (*asset, error) {
	bytes, err := goWrite_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWrite_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint16Tmpl,
		"go/write_uint16.tmpl",
	)
}

func goWrite_uint16Tmpl() (*asset, error) {
	bytes, err := goWrite_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWrite_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint32Tmpl,
		"go/write_uint32.tmpl",
	)
}

func goWrite_uint32Tmpl() (*asset, error) {
	bytes, err := goWrite_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWrite_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint64Tmpl,
		"go/write_uint64.tmpl",
	)
}

func goWrite_uint64Tmpl() (*asset, error) {
	bytes, err := goWrite_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWrite_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWrite_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWrite_uint8Tmpl,
		"go/write_uint8.tmpl",
	)
}

func goWrite_uint8Tmpl() (*asset, error) {
	bytes, err := goWrite_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write_uint8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go/array_index.tmpl": goArray_indexTmpl,
	"go/doc.tmpl": goDocTmpl,
	"go/object.tmpl": goObjectTmpl,
	"go/objects.tmpl": goObjectsTmpl,
	"go/read_array.tmpl": goRead_arrayTmpl,
	"go/read_bool.tmpl": goRead_boolTmpl,
	"go/read_byte.tmpl": goRead_byteTmpl,
	"go/read_float32.tmpl": goRead_float32Tmpl,
	"go/read_float64.tmpl": goRead_float64Tmpl,
	"go/read_int.tmpl": goRead_intTmpl,
	"go/read_int16.tmpl": goRead_int16Tmpl,
	"go/read_int32.tmpl": goRead_int32Tmpl,
	"go/read_int64.tmpl": goRead_int64Tmpl,
	"go/read_int8.tmpl": goRead_int8Tmpl,
	"go/read_string.tmpl": goRead_stringTmpl,
	"go/read_uint.tmpl": goRead_uintTmpl,
	"go/read_uint16.tmpl": goRead_uint16Tmpl,
	"go/read_uint32.tmpl": goRead_uint32Tmpl,
	"go/read_uint64.tmpl": goRead_uint64Tmpl,
	"go/read_uint8.tmpl": goRead_uint8Tmpl,
	"go/write_array.tmpl": goWrite_arrayTmpl,
	"go/write_bool.tmpl": goWrite_boolTmpl,
	"go/write_byte.tmpl": goWrite_byteTmpl,
	"go/write_float32.tmpl": goWrite_float32Tmpl,
	"go/write_float64.tmpl": goWrite_float64Tmpl,
	"go/write_int.tmpl": goWrite_intTmpl,
	"go/write_int16.tmpl": goWrite_int16Tmpl,
	"go/write_int32.tmpl": goWrite_int32Tmpl,
	"go/write_int64.tmpl": goWrite_int64Tmpl,
	"go/write_int8.tmpl": goWrite_int8Tmpl,
	"go/write_string.tmpl": goWrite_stringTmpl,
	"go/write_uint.tmpl": goWrite_uintTmpl,
	"go/write_uint16.tmpl": goWrite_uint16Tmpl,
	"go/write_uint32.tmpl": goWrite_uint32Tmpl,
	"go/write_uint64.tmpl": goWrite_uint64Tmpl,
	"go/write_uint8.tmpl": goWrite_uint8Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go": &bintree{nil, map[string]*bintree{
		"array_index.tmpl": &bintree{goArray_indexTmpl, map[string]*bintree{}},
		"doc.tmpl": &bintree{goDocTmpl, map[string]*bintree{}},
		"object.tmpl": &bintree{goObjectTmpl, map[string]*bintree{}},
		"objects.tmpl": &bintree{goObjectsTmpl, map[string]*bintree{}},
		"read_array.tmpl": &bintree{goRead_arrayTmpl, map[string]*bintree{}},
		"read_bool.tmpl": &bintree{goRead_boolTmpl, map[string]*bintree{}},
		"read_byte.tmpl": &bintree{goRead_byteTmpl, map[string]*bintree{}},
		"read_float32.tmpl": &bintree{goRead_float32Tmpl, map[string]*bintree{}},
		"read_float64.tmpl": &bintree{goRead_float64Tmpl, map[string]*bintree{}},
		"read_int.tmpl": &bintree{goRead_intTmpl, map[string]*bintree{}},
		"read_int16.tmpl": &bintree{goRead_int16Tmpl, map[string]*bintree{}},
		"read_int32.tmpl": &bintree{goRead_int32Tmpl, map[string]*bintree{}},
		"read_int64.tmpl": &bintree{goRead_int64Tmpl, map[string]*bintree{}},
		"read_int8.tmpl": &bintree{goRead_int8Tmpl, map[string]*bintree{}},
		"read_string.tmpl": &bintree{goRead_stringTmpl, map[string]*bintree{}},
		"read_uint.tmpl": &bintree{goRead_uintTmpl, map[string]*bintree{}},
		"read_uint16.tmpl": &bintree{goRead_uint16Tmpl, map[string]*bintree{}},
		"read_uint32.tmpl": &bintree{goRead_uint32Tmpl, map[string]*bintree{}},
		"read_uint64.tmpl": &bintree{goRead_uint64Tmpl, map[string]*bintree{}},
		"read_uint8.tmpl": &bintree{goRead_uint8Tmpl, map[string]*bintree{}},
		"write_array.tmpl": &bintree{goWrite_arrayTmpl, map[string]*bintree{}},
		"write_bool.tmpl": &bintree{goWrite_boolTmpl, map[string]*bintree{}},
		"write_byte.tmpl": &bintree{goWrite_byteTmpl, map[string]*bintree{}},
		"write_float32.tmpl": &bintree{goWrite_float32Tmpl, map[string]*bintree{}},
		"write_float64.tmpl": &bintree{goWrite_float64Tmpl, map[string]*bintree{}},
		"write_int.tmpl": &bintree{goWrite_intTmpl, map[string]*bintree{}},
		"write_int16.tmpl": &bintree{goWrite_int16Tmpl, map[string]*bintree{}},
		"write_int32.tmpl": &bintree{goWrite_int32Tmpl, map[string]*bintree{}},
		"write_int64.tmpl": &bintree{goWrite_int64Tmpl, map[string]*bintree{}},
		"write_int8.tmpl": &bintree{goWrite_int8Tmpl, map[string]*bintree{}},
		"write_string.tmpl": &bintree{goWrite_stringTmpl, map[string]*bintree{}},
		"write_uint.tmpl": &bintree{goWrite_uintTmpl, map[string]*bintree{}},
		"write_uint16.tmpl": &bintree{goWrite_uint16Tmpl, map[string]*bintree{}},
		"write_uint32.tmpl": &bintree{goWrite_uint32Tmpl, map[string]*bintree{}},
		"write_uint64.tmpl": &bintree{goWrite_uint64Tmpl, map[string]*bintree{}},
		"write_uint8.tmpl": &bintree{goWrite_uint8Tmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

