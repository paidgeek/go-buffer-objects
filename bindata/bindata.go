// Code generated by go-bindata.
// sources:
// go/array_index.tmpl
// go/doc.tmpl
// go/object.tmpl
// go/objects.tmpl
// go/read/read_array.tmpl
// go/read/read_bool.tmpl
// go/read/read_byte.tmpl
// go/read/read_float32.tmpl
// go/read/read_float64.tmpl
// go/read/read_int.tmpl
// go/read/read_int16.tmpl
// go/read/read_int32.tmpl
// go/read/read_int64.tmpl
// go/read/read_int8.tmpl
// go/read/read_object.tmpl
// go/read/read_object_indexed.tmpl
// go/read/read_slice.tmpl
// go/read/read_string.tmpl
// go/read/read_uint.tmpl
// go/read/read_uint16.tmpl
// go/read/read_uint32.tmpl
// go/read/read_uint64.tmpl
// go/read/read_uint8.tmpl
// go/write/write_array.tmpl
// go/write/write_bool.tmpl
// go/write/write_byte.tmpl
// go/write/write_float32.tmpl
// go/write/write_float64.tmpl
// go/write/write_int.tmpl
// go/write/write_int16.tmpl
// go/write/write_int32.tmpl
// go/write/write_int64.tmpl
// go/write/write_int8.tmpl
// go/write/write_object.tmpl
// go/write/write_object_indexed.tmpl
// go/write/write_slice.tmpl
// go/write/write_string.tmpl
// go/write/write_uint.tmpl
// go/write/write_uint16.tmpl
// go/write/write_uint32.tmpl
// go/write/write_uint64.tmpl
// go/write/write_uint8.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goArray_indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x8d\xce\x8c\x05\x04\x00\x00\xff\xff\xf4\xae\xc8\x43\x0c\x00\x00\x00")

func goArray_indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_goArray_indexTmpl,
		"go/array_index.tmpl",
	)
}

func goArray_indexTmpl() (*asset, error) {
	bytes, err := goArray_indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/array_index.tmpl", size: 12, mode: os.FileMode(438), modTime: time.Unix(1469777060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goDocTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4f\x6f\xda\x4e\x10\x3d\x83\xc4\x77\x98\x1f\x87\xc8\x28\x04\x08\xbf\xa8\xaa\x50\x88\xd4\x4a\x89\xc4\x21\x49\x95\x36\xcd\x21\xe2\xb0\xd8\x6b\x70\x02\xbb\x68\xbd\x94\xa6\xd4\xdf\xbd\x33\x3b\x36\xd8\xe6\x5f\x7a\x69\x2e\xf1\xce\xce\xbc\x7d\xf3\xe6\xed\x26\xed\x36\x8c\xa5\x92\x46\x58\x19\xc0\x32\xb2\x13\x18\x2d\x42\x3d\x7a\x91\xbe\x8d\x7b\x30\xb1\x76\x1e\xf7\xda\xed\x31\x6e\x2c\x46\x2d\x5f\xcf\xda\x73\x11\x05\x63\x29\x5f\xdb\x9b\xbc\x5a\xb5\x56\x9d\x0b\xff\x55\x8c\x25\xac\x56\xad\x2f\xfc\x79\x27\x66\x32\x49\x6a\xd5\x68\x36\xd7\xc6\x82\x57\xab\x56\xea\x91\xae\xd3\x2f\x69\x8c\x36\x31\x7f\x2a\x5f\x07\x91\x1a\xb7\x5f\x62\xad\x28\xb2\x5a\x9d\x81\x11\x0a\xa1\x5a\x03\x57\x19\x13\x48\xa5\x8e\xc0\x49\x92\x25\x48\x15\x50\xb4\x51\xab\xfa\x5a\xc5\x0e\xfc\x56\xfc\xfc\x1a\xfd\x92\xd0\x27\x0a\xb8\xb8\x77\xdc\x28\x44\x99\x39\x54\xde\x60\xd4\x41\x80\xc9\x0f\x62\xc9\x5c\x61\x11\x29\x7b\xfe\x81\x21\x06\x41\x56\x87\x87\xc1\x59\x7a\xdc\x0f\x61\x5c\x27\xd7\xc6\x3c\xaa\x57\xa5\x97\x8a\xe1\xb0\x86\x9b\x6a\xdd\xc9\xa5\x57\x5f\xf0\x1e\xb0\x40\xf5\x86\xab\xb5\x6f\x73\xa7\xcf\x40\x59\x69\x42\xe1\xa7\x0a\x41\x94\xad\x61\xe5\x28\x79\x8d\x94\x08\xae\x88\x3f\xae\x71\x49\x5b\xf1\x77\x61\x22\x31\x9a\xca\x34\x3c\xd2\x7a\x8a\xf1\x5b\x61\xe2\x89\x98\x7e\xd6\xc1\x9b\x87\x53\x81\xe7\xe1\xe8\xcd\xca\x26\xe8\x30\xa4\xca\xac\xfc\x51\xcd\xde\x97\xf8\x20\x63\x69\x3d\x64\xec\x04\xc8\x04\xc3\x69\x4c\x49\x85\x70\xa1\x7c\xc0\x2e\xb7\x3b\x79\x42\x97\x20\xfd\x28\x48\xf9\x37\x76\x75\x4b\x3d\xc6\x68\x34\x7f\x02\x98\xb8\x2a\x4e\x3c\x3f\x1b\x5f\xc4\x32\x1b\x44\x0f\xd7\x15\x23\xed\xc2\x28\x38\xc1\x18\x63\xad\x12\x57\xbd\x9e\x4f\x25\x90\xa1\x58\x4c\x6d\x3e\x5b\x45\xa4\x50\xe2\x7a\x71\xcc\x9f\x4c\x64\xe5\x36\xaf\x4f\xd6\xd3\x3b\xe8\x36\x61\xa3\x53\x03\x3c\xc5\x32\x11\x6b\x24\xdf\xeb\x83\x6e\xd1\xbc\x70\x89\x69\xcf\x9d\x21\xda\x80\x32\x51\x82\x2c\x76\x9e\x8b\xc1\xd5\x15\x7c\xa4\x8d\x28\xa4\xc2\xf2\x34\x09\xb5\x12\x93\x87\x1d\x30\x47\x29\x46\x38\xdd\x35\x0e\x65\x60\x18\xdc\x0f\x6d\xfd\x5f\xd8\x5a\x1f\x52\x51\x40\x30\x25\x73\x34\xe1\x82\x36\x13\x90\xd3\x98\x0d\xb7\x2f\xaf\xdb\x60\xe1\xd6\x4a\x1e\xd5\xf0\x9b\x3e\xaa\x61\x13\x96\x10\xe9\x96\x03\x30\x99\xa0\x4d\xba\x3b\x7c\x7f\x58\x85\xb2\x08\x70\x0a\xdd\x77\xc8\x76\xda\x77\x69\x09\x4b\x4f\xa2\xa0\x3a\x3d\xda\x1a\x62\xe8\xc0\xe0\x1d\x43\x6a\xd7\x6a\x2b\xa6\x74\x72\x07\x17\xa1\x36\xc0\x81\x4b\x70\xf8\x27\x27\x8e\x68\xbf\x4f\xae\x4a\xb5\x63\xee\x7d\x58\x72\x4f\x24\xdd\xb3\x2b\xea\x0d\xdd\x10\x18\x00\x99\xa9\xa2\x9a\x2e\xee\x8a\x37\xb2\x3e\x48\x11\xec\x24\x58\xf0\xe0\x2e\x89\xf3\x96\xe4\xbb\xe7\xa5\x86\xfc\x0d\x5e\x6a\xc3\xcb\x4b\xf4\x05\x71\xd2\x48\xf7\xf0\xfd\xcd\x3c\x5a\x68\xb5\x7c\xa1\x0e\x8d\x63\x23\xff\x45\x6f\x58\xb2\xdb\x66\xaf\xcb\x7b\x44\xa9\xb5\xf5\x38\x35\xa1\xc3\x2e\x4f\xcf\xd5\xc7\x74\xba\x31\x7a\x56\x78\xd5\x0c\x39\x8d\x72\x9d\xd3\x76\x3b\xb3\x64\xbc\x82\x82\x74\x3e\x5e\x8e\xd4\x0d\x7b\xad\xd1\x3d\xe8\x0b\xe3\x18\xe4\x6c\xd1\xdd\xe3\x0b\x54\x93\x2a\xfe\x63\x90\x14\x12\x57\xd8\xc3\xf5\xfd\x4d\x79\x04\xa9\x73\xb8\x32\x80\x7f\x31\xf5\x26\x94\xff\xe8\xa5\xe7\x67\xb7\xb5\x73\xd8\x13\xdc\x31\xa7\xb9\x37\xc7\x7d\x1c\x55\xf2\xb8\x94\x45\x2d\x1d\xa5\x92\x9a\x0c\xb4\xad\x1e\xe7\xc6\xfc\x6f\x03\x0a\x78\x40\xbe\xbc\x83\xd3\x82\xdc\x13\x9d\xac\x0d\xc2\x6d\x65\xed\xfd\xd5\x13\xb2\xd5\x9f\x7b\xb9\xde\xe3\x96\x03\xe6\xd8\x7b\xb3\xb2\x7c\x7c\xfc\xdc\x95\x4e\xfe\x04\x00\x00\xff\xff\x1d\xc0\x0b\x9d\x0a\x0a\x00\x00")

func goDocTmplBytes() ([]byte, error) {
	return bindataRead(
		_goDocTmpl,
		"go/doc.tmpl",
	)
}

func goDocTmpl() (*asset, error) {
	bytes, err := goDocTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/doc.tmpl", size: 2570, mode: os.FileMode(438), modTime: time.Unix(1469816182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x4b\x6f\xd3\x40\x10\x3e\xbb\x52\xff\xc3\x60\x45\xc8\x79\x60\x41\x0f\x1c\x0a\x39\x40\x25\xa4\x1c\x68\x25\x0a\x5c\xaa\x1e\xd6\xf1\xb8\x6c\xe5\xac\xcb\xae\x43\x09\x2b\xff\x77\x66\x77\xbd\x7e\x24\x4e\x80\x70\x6d\x55\x29\xf6\x7a\xe6\xfb\x66\xbe\x9d\x47\xb9\x79\x40\xd0\x3a\xbe\x64\x2b\xac\x2a\x50\xa5\x5c\x2f\x4b\xd0\xa7\x27\x81\xd6\x2f\x40\x32\x71\x87\x10\x7f\xe0\x98\xa7\xaa\xaa\xea\x53\x9e\x41\xbc\x50\xef\xa4\x64\x1b\x7b\x16\xb4\xfe\x37\xf4\x68\x3f\x5c\xf3\x5f\xf4\x7e\xab\xb5\x33\xbe\x4a\xee\x71\x59\x56\xd5\x44\x6b\x14\x69\x55\x91\xd9\x67\x62\x6e\x20\x31\x57\x58\xe3\x5e\xe7\x7c\x89\x3b\xb8\xc7\x20\x79\xd3\xd3\x13\x00\xe8\x80\x4d\x86\x7c\xb6\x19\x77\x6c\x0c\x59\xff\x99\xfe\xb3\xb5\x58\x42\x24\x97\x3f\x2c\xa8\x73\x1d\xc3\x22\x8d\xc6\xb0\xe6\xa2\x7c\xf5\xda\x4a\x29\xb1\x5c\x4b\x61\x20\x17\x87\x1d\x8d\x6a\xe4\x4a\x9e\xd6\x4f\xd1\x2b\x9c\xcf\xe1\xe5\xbf\x5e\xc7\x76\xfe\x41\x10\x64\x85\x04\x6e\xc1\xde\xd0\xef\x5b\xe8\x5f\x14\x9d\x4d\xa7\x96\x93\xfe\x2c\xed\x74\x0e\x14\x5d\xdc\x04\x77\xc3\x6f\x63\x17\x9e\x35\xaa\x89\xbc\xda\xf8\x1d\xac\x5c\x10\x52\x05\x71\x71\x17\x1e\xcf\x9a\xa3\x88\xb6\x99\xc7\x30\x85\xb3\x6d\xde\x9a\xc2\xfb\xf5\xa1\x61\x42\x07\x09\x53\x68\x5e\xaf\x48\x0e\x2f\x4d\x7b\x8f\xc3\x35\xe7\xe1\xce\x9e\x94\x3c\x46\xc9\xae\x52\x83\xd9\xb7\xa9\xff\x31\xe7\xbd\x79\xf8\x24\xba\xd1\xb7\xc1\xef\xc4\xba\xa7\x7d\x7d\x5b\x1a\xcf\x43\xcd\xac\xbe\x32\xc9\x59\x92\x63\xdd\x9d\x49\x51\xe4\xfd\xb6\xf6\x3d\xd8\x35\x24\xe1\x68\x96\x9a\xd9\xea\x62\x84\x8c\x99\x6c\xff\x66\x7c\x7c\x64\x52\x7d\x63\xf9\xfb\x22\xdd\x44\xc9\x3a\xa3\xe1\x97\x6c\x4a\x9c\x41\x91\x65\x66\x34\xb4\xf3\x61\xdf\x4c\x78\x94\xbc\xc4\x81\xe4\xeb\x80\x09\xe7\x00\xfb\x17\xb1\xfa\x5f\x7e\x89\x2c\x3d\x96\xfe\x13\x2a\x2c\x49\x65\x83\x3f\x31\x1f\xe7\xed\x7a\xd2\x07\x67\xa7\x2d\x1d\xf2\x74\x35\x64\x01\x52\x56\xb2\x19\xa0\x94\xa6\x71\xee\x55\x21\xe2\x5a\x5b\xe3\x6d\x6a\xd0\x14\x1f\x7d\x7d\x36\x07\xc1\xdd\xa5\xfa\x28\xc3\x90\x5e\x3a\x51\x87\x0d\xd5\x39\x84\x54\x7f\x8e\x25\x32\x0c\xe3\x36\xaa\x4b\x7c\x6c\xec\x22\xad\x47\x0f\x4c\xb2\x95\x32\xec\x8d\x42\x24\x8f\x95\x6c\xc4\x45\x8a\x3f\x67\x30\xc2\x1c\x57\x48\x8a\xf6\x8d\x28\x32\x67\x51\x55\xb3\x66\xd5\x79\xdb\xf8\x82\x18\xf2\x0b\xa6\xdc\xa6\xea\x0d\x31\xb3\x2a\x3b\x0d\x59\xef\x85\xdd\xc5\x6c\x21\x9d\x73\x03\x3b\xb4\x5e\x9b\x8f\x6e\x1d\xd6\xe7\xe3\x8e\xf6\xdd\x66\x78\xde\x5e\x96\x9b\x12\x43\x15\x12\x74\xb4\xa4\xc7\x4e\x32\x33\xef\xe4\x6b\xc6\xdc\xf8\xef\x00\x00\x00\xff\xff\xb0\xef\x2c\x06\xa4\x08\x00\x00")

func goObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectTmpl,
		"go/object.tmpl",
	)
}

func goObjectTmpl() (*asset, error) {
	bytes, err := goObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/object.tmpl", size: 2212, mode: os.FileMode(438), modTime: time.Unix(1469816211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goObjectsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x55\x28\x4a\xcc\x4b\x4f\x55\xd0\xab\xad\xe5\xe5\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x4f\xca\x4a\x4d\x2e\x51\x82\x49\xe8\x2a\xa4\xe6\xa5\x28\xe8\xd6\xd6\x02\x02\x00\x00\xff\xff\xf4\x69\xbc\xe5\x33\x00\x00\x00")

func goObjectsTmplBytes() ([]byte, error) {
	return bindataRead(
		_goObjectsTmpl,
		"go/objects.tmpl",
	)
}

func goObjectsTmpl() (*asset, error) {
	bytes, err := goObjectsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/objects.tmpl", size: 51, mode: os.FileMode(438), modTime: time.Unix(1469619563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x7a\x8e\x45\x45\x89\x95\xc1\x99\x55\xa9\xb5\xb5\x40\x31\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xa2\xd4\xc4\x14\xb0\x94\x67\x5e\x4a\x6a\x85\x82\x5e\x6d\x2d\x2f\x57\x2d\x20\x00\x00\xff\xff\x8e\xac\x75\x8c\x3f\x00\x00\x00")

func goReadRead_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_arrayTmpl,
		"go/read/read_array.tmpl",
	)
}

func goReadRead_arrayTmpl() (*asset, error) {
	bytes, err := goReadRead_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_array.tmpl", size: 63, mode: os.FileMode(438), modTime: time.Unix(1469770903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xb0\xb5\x55\x30\xe4\xe5\x02\xb2\x15\xb4\x81\x2c\x40\x00\x00\x00\xff\xff\x73\x7f\x21\x1d\x2d\x00\x00\x00")

func goReadRead_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_boolTmpl,
		"go/read/read_bool.tmpl",
	)
}

func goReadRead_boolTmpl() (*asset, error) {
	bytes, err := goReadRead_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_bool.tmpl", size: 45, mode: os.FileMode(438), modTime: time.Unix(1469673122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\x68\x49\x01\xd1\x28\x00\x00\x00")

func goReadRead_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_byteTmpl,
		"go/read/read_byte.tmpl",
	)
}

func goReadRead_byteTmpl() (*asset, error) {
	bytes, err := goReadRead_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_byte.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469673128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_float32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\x28\xcd\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x53\xd0\x56\x30\x88\xd5\x54\xb0\xb1\x51\x30\xd0\x54\xa8\xe1\xe5\xe2\x04\x02\x05\x2c\x8a\x0c\x21\x8a\x2c\xf0\x2a\x32\x82\x28\x32\x34\xc3\xab\xca\x18\xa2\xca\xc8\x44\x93\x97\xab\x28\xb9\x4c\x0f\xe1\x3c\x5b\x05\x2d\x0d\xad\xb4\x9c\xfc\x44\xa0\x06\x4d\x8d\xd2\xbc\xe2\xc4\xb4\x54\xbd\x80\x7c\xa0\x01\xa9\x45\x1a\x6a\x08\x7f\x68\x02\x75\x82\xcd\xb2\x55\x30\x01\x04\x00\x00\xff\xff\x3a\xb1\x43\xaf\xde\x00\x00\x00")

func goReadRead_float32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_float32Tmpl,
		"go/read/read_float32.tmpl",
	)
}

func goReadRead_float32Tmpl() (*asset, error) {
	bytes, err := goReadRead_float32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_float32.tmpl", size: 222, mode: os.FileMode(438), modTime: time.Unix(1469673556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\x28\xcd\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x53\xd0\x56\x30\x88\xd5\x54\xb0\xb1\x51\x30\xd0\x54\xa8\xe1\xe5\xe2\x04\x02\x05\x2c\x8a\x0c\x21\x8a\x2c\xf0\x2a\x32\x82\x28\x32\x34\xc3\xab\xca\x18\xa2\xca\xc8\x04\xaf\x2a\x13\x88\x2a\x63\x23\x98\x2a\x05\x05\xac\xea\x4c\x21\xea\x4c\x0c\x08\xa8\x33\x83\xaa\xb3\x20\xa0\xce\x1c\xa2\xce\xd4\x4c\x93\x97\xab\x28\xb9\x4c\x0f\x11\x78\xb6\x0a\x5a\x1a\x5a\x69\x39\xf9\x89\x40\x0d\x9a\x1a\xa5\x79\xc5\x89\x69\xa9\x7a\x01\xf9\x40\x03\x52\x8b\x34\xd4\x10\xa1\xac\x09\xd4\x09\x36\xcb\x56\xc1\x02\x10\x00\x00\xff\xff\x7e\x67\xd6\xeb\x7c\x01\x00\x00")

func goReadRead_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_float64Tmpl,
		"go/read/read_float64.tmpl",
	)
}

func goReadRead_float64Tmpl() (*asset, error) {
	bytes, err := goReadRead_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_float64.tmpl", size: 380, mode: os.FileMode(438), modTime: time.Unix(1469673649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x12\x50\xd0\x56\x30\x04\x0a\xda\xd8\x28\x58\x60\x91\x32\x82\x48\x19\x9a\x61\x91\x33\x86\xc8\x19\x99\x68\xf2\x72\x81\x45\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x9b\x51\x3a\xd7\x7a\x00\x00\x00")

func goReadRead_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_intTmpl,
		"go/read/read_int.tmpl",
	)
}

func goReadRead_intTmpl() (*asset, error) {
	bytes, err := goReadRead_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_int.tmpl", size: 122, mode: os.FileMode(438), modTime: time.Unix(1469764920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x34\xd3\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x11\x52\xd0\x56\x30\x04\x0a\xdb\xd8\x28\x58\x68\xf2\x72\x81\x05\x6c\x15\x8c\x00\x01\x00\x00\xff\xff\x5f\xdd\x77\x46\x46\x00\x00\x00")

func goReadRead_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_int16Tmpl,
		"go/read/read_int16.tmpl",
	)
}

func goReadRead_int16Tmpl() (*asset, error) {
	bytes, err := goReadRead_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_int16.tmpl", size: 70, mode: os.FileMode(438), modTime: time.Unix(1469765067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x11\x52\xd0\x56\x30\x04\x0a\xdb\xd8\x28\x58\x60\x95\x34\x82\x48\x1a\x9a\x61\x95\x35\x86\xc8\x1a\x99\x68\xf2\x72\x81\x45\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x4e\x54\x81\x60\x82\x00\x00\x00")

func goReadRead_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_int32Tmpl,
		"go/read/read_int32.tmpl",
	)
}

func goReadRead_int32Tmpl() (*asset, error) {
	bytes, err := goReadRead_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_int32.tmpl", size: 130, mode: os.FileMode(438), modTime: time.Unix(1469764976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x11\x52\xd0\x56\x30\x04\x0a\xdb\xd8\x28\x58\x60\x95\x34\x82\x48\x1a\x9a\x61\x95\x35\x86\xc8\x1a\x99\x60\x95\x35\x81\xc8\x1a\x1b\x61\x95\x35\x85\xc8\x9a\x18\x60\x95\x35\x83\xca\x62\x77\x95\x39\x44\xd6\xd4\x4c\x93\x97\x0b\x2c\x62\xab\x60\x01\x08\x00\x00\xff\xff\x9e\xfc\x21\xb2\xfa\x00\x00\x00")

func goReadRead_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_int64Tmpl,
		"go/read/read_int64.tmpl",
	)
}

func goReadRead_int64Tmpl() (*asset, error) {
	bytes, err := goReadRead_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_int64.tmpl", size: 250, mode: os.FileMode(438), modTime: time.Unix(1469765058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\xc8\xcc\x2b\xb1\xd0\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\x52\x13\x0d\x3b\x28\x00\x00\x00")

func goReadRead_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_int8Tmpl,
		"go/read/read_int8.tmpl",
	)
}

func goReadRead_int8Tmpl() (*asset, error) {
	bytes, err := goReadRead_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469673163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_objectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x50\x03\x72\x42\x2a\x0b\x80\x9c\xea\x5a\x5e\xae\xfc\xb4\x34\xa0\x18\x8a\x1a\xbd\xd0\xbc\xdc\xc4\xa2\xe2\x8c\xc4\x1c\xa7\xfc\x94\x4a\x8d\xa4\xd2\x34\x1d\x05\xa0\x32\x4d\x40\x00\x00\x00\xff\xff\xb4\x9f\x1a\x0f\x49\x00\x00\x00")

func goReadRead_objectTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_objectTmpl,
		"go/read/read_object.tmpl",
	)
}

func goReadRead_objectTmpl() (*asset, error) {
	bytes, err := goReadRead_objectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_object.tmpl", size: 73, mode: os.FileMode(438), modTime: time.Unix(1469766629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_object_indexedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\x31\x4f\xc3\x30\x14\x84\xe7\x56\xea\x7f\xb8\x09\x25\xa4\xb2\x5a\x06\x84\x20\x1e\x60\x63\x61\x29\x4c\x56\x06\xd3\xc6\xc2\xc2\x71\x90\x43\x91\xc2\x23\xff\x9d\xe7\x46\x6a\x9d\xee\xdd\xf2\x3e\xdd\xf9\xee\x42\x64\x0d\xc4\x73\xb7\x71\x76\x5b\x0f\xc3\x62\x3e\x73\x9e\x48\xbc\xe8\x86\x2f\xdc\x4b\xec\xad\xff\x5e\xdf\x66\xef\x7b\xa3\x5a\x63\xaa\x1c\x7f\xc8\xa6\x0c\x05\xd6\xcc\xcb\x12\x77\x39\xfb\x0f\x44\xe2\x86\x3f\xc3\xf6\x47\x9c\x1e\x93\x68\xf4\x67\x9d\xa9\xea\x9a\xd9\x6b\xff\xc5\x6c\x89\x24\x2d\x9a\x4d\x1b\x60\x93\xd8\x55\xfe\xc0\x77\x99\xca\x18\x14\x05\x68\x31\x07\x30\x4d\x50\xb6\xe2\x90\xab\xe3\xeb\x34\x8c\xa2\xd8\x48\xe2\x5c\x2a\xde\x7c\xa3\x43\xf7\xa1\xdd\x53\xbb\xeb\xe3\x98\x25\x58\x99\x1f\x3c\xec\x24\xaa\x5d\x37\xfe\x92\xf3\x1d\x8a\x8f\xc7\x10\x74\xbf\xb1\xbf\x4c\x92\x41\x31\xf2\x34\x62\x35\x96\x9f\xaa\x8f\xfd\x67\x17\x6e\xef\x77\xb1\xfc\x7f\x00\x00\x00\xff\xff\x0c\x14\x73\x0f\xe1\x01\x00\x00")

func goReadRead_object_indexedTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_object_indexedTmpl,
		"go/read/read_object_indexed.tmpl",
	)
}

func goReadRead_object_indexedTmpl() (*asset, error) {
	bytes, err := goReadRead_object_indexedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_object_indexed.tmpl", size: 481, mode: os.FileMode(438), modTime: time.Unix(1469777596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_sliceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xc9\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\x28\xcd\xcc\x2b\x31\x34\xd3\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x15\x53\xd0\x56\x30\x04\x8a\xdb\xd8\x28\x58\x68\xf2\x72\x81\x05\x6c\x15\x8c\x78\xb9\x8a\x92\xcb\xf4\x10\x46\xd9\x2a\xe4\x26\x66\xa7\x6a\x44\xc7\x02\x85\x42\x2a\x0b\x80\x42\x3a\x0a\x48\x56\x01\x75\xa6\xe5\x17\x29\x64\x22\x59\x69\xa0\x69\x0d\xe4\xdb\x20\xab\x02\x0a\x68\x6b\x2b\x54\xf3\x72\x71\x56\x57\x17\xa5\x26\xa6\x38\x16\x15\x25\x56\x7a\xe6\xa5\xa4\x56\x28\xe8\xd5\xd6\xf2\x72\xd5\x02\x02\x00\x00\xff\xff\x7a\xc1\x55\x6c\xbd\x00\x00\x00")

func goReadRead_sliceTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_sliceTmpl,
		"go/read/read_slice.tmpl",
	)
}

func goReadRead_sliceTmpl() (*asset, error) {
	bytes, err := goReadRead_sliceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_slice.tmpl", size: 189, mode: os.FileMode(438), modTime: time.Unix(1469771327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xc8\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x12\x50\xd0\x56\x30\x04\x0a\xda\xd8\x28\x58\x68\xf2\x72\x81\x05\x6c\x15\x8c\x78\xb9\x8a\x92\xcb\xf4\x10\x86\xd8\x2a\x14\x97\x14\x65\xe6\xa5\xc3\x74\x59\x21\x2c\xd0\x06\x9b\x0a\xd7\x8a\x90\x00\x04\x00\x00\xff\xff\x5b\xd3\x8a\x8c\x84\x00\x00\x00")

func goReadRead_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_stringTmpl,
		"go/read/read_string.tmpl",
	)
}

func goReadRead_stringTmpl() (*asset, error) {
	bytes, err := goReadRead_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_string.tmpl", size: 132, mode: os.FileMode(438), modTime: time.Unix(1469823621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x16\x51\xd0\x56\x30\x8c\x55\xb0\xb1\x51\xb0\xd0\xc4\x26\x67\x04\xd4\x01\x94\x34\x34\xc3\x26\x69\x0c\x91\x34\x32\xd1\xd4\xe4\xe5\x02\x0b\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xea\x51\x25\x29\x7f\x00\x00\x00")

func goReadRead_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_uintTmpl,
		"go/read/read_uint.tmpl",
	)
}

func goReadRead_uintTmpl() (*asset, error) {
	bytes, err := goReadRead_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_uint.tmpl", size: 127, mode: os.FileMode(438), modTime: time.Unix(1469778148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x34\xd3\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x81\x09\xc1\xc4\x14\xb4\x15\x0c\x81\xe2\x36\x36\x0a\x16\x9a\xbc\x5c\x60\x01\x5b\x05\x23\x40\x00\x00\x00\xff\xff\x00\xdf\x74\xcd\x48\x00\x00\x00")

func goReadRead_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_uint16Tmpl,
		"go/read/read_uint16.tmpl",
	)
}

func goReadRead_uint16Tmpl() (*asset, error) {
	bytes, err := goReadRead_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_uint16.tmpl", size: 72, mode: os.FileMode(438), modTime: time.Unix(1469778167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x36\xd2\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x15\x53\xd0\x56\x30\x04\x8a\xdb\xd8\x28\x58\x60\x97\x35\x82\xc8\x1a\x9a\x61\x97\x36\x86\x48\x1b\x99\x68\xf2\x72\x81\x45\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x55\xed\xed\x51\x86\x00\x00\x00")

func goReadRead_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_uint32Tmpl,
		"go/read/read_uint32.tmpl",
	)
}

func goReadRead_uint32Tmpl() (*asset, error) {
	bytes, err := goReadRead_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_uint32.tmpl", size: 134, mode: os.FileMode(438), modTime: time.Unix(1469778199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\x31\x33\xd1\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\x54\xa8\x51\xd0\x40\x15\x53\xd0\x56\x30\x04\x8a\xdb\xd8\x28\x58\x60\x97\x35\x82\xc8\x1a\x9a\x61\x97\x36\x86\x48\x1b\x99\x60\x97\x36\x81\x48\x1b\x1b\x61\x97\x36\x85\x48\x9b\x18\x60\x97\x36\x83\x4a\xe3\x70\x9a\x39\x44\xda\xd4\x4c\x93\x97\x0b\x2c\x62\xab\x60\x01\x08\x00\x00\xff\xff\x41\xfd\x83\x48\x02\x01\x00\x00")

func goReadRead_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_uint64Tmpl,
		"go/read/read_uint64.tmpl",
	)
}

func goReadRead_uint64Tmpl() (*asset, error) {
	bytes, err := goReadRead_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_uint64.tmpl", size: 258, mode: os.FileMode(438), modTime: time.Unix(1469778251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goReadRead_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\x55\x28\xcd\xcc\x2b\xb1\xd0\x48\x2a\x4d\x8b\xce\x4f\x4b\x8b\xd5\xe4\xe5\x02\x52\x0a\xda\xb6\x0a\x86\x80\x00\x00\x00\xff\xff\xf7\xbd\xd7\x31\x29\x00\x00\x00")

func goReadRead_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goReadRead_uint8Tmpl,
		"go/read/read_uint8.tmpl",
	)
}

func goReadRead_uint8Tmpl() (*asset, error) {
	bytes, err := goReadRead_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/read/read_uint8.tmpl", size: 41, mode: os.FileMode(438), modTime: time.Unix(1469673400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_arrayTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcb\x2f\x52\xc8\x54\xb0\xb2\x55\x30\xb0\x06\xd2\x36\x0a\xd5\xd5\x7a\x8e\x45\x45\x89\x95\xc1\x99\x55\xa9\xb5\xb5\x40\x31\x6d\x6d\x85\x6a\x5e\x2e\xce\xea\xea\xf2\xa2\xcc\x92\x54\xb0\x9c\x67\x5e\x4a\x6a\x85\x82\x5e\x6d\x2d\x2f\x57\x2d\x20\x00\x00\xff\xff\x89\x06\x81\x44\x40\x00\x00\x00")

func goWriteWrite_arrayTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_arrayTmpl,
		"go/write/write_array.tmpl",
	)
}

func goWriteWrite_arrayTmpl() (*asset, error) {
	bytes, err := goWriteWrite_arrayTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_array.tmpl", size: 64, mode: os.FileMode(438), modTime: time.Unix(1469770921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_boolTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4c\x53\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xa8\xe6\xe5\xe2\x4c\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x30\xe4\xe5\xaa\x55\x48\xcd\x29\x4e\x45\x97\x30\x00\x4a\xf0\x72\x01\x39\x0a\xda\x40\x55\x80\x00\x00\x00\xff\xff\xaa\x5c\xbc\x9e\x47\x00\x00\x00")

func goWriteWrite_boolTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_boolTmpl,
		"go/write/write_bool.tmpl",
	)
}

func goWriteWrite_boolTmpl() (*asset, error) {
	bytes, err := goWriteWrite_boolTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_bool.tmpl", size: 71, mode: os.FileMode(438), modTime: time.Unix(1469596087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_byteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe5\x02\x8a\x2a\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x18\xd1\xa1\x8d\x22\x00\x00\x00")

func goWriteWrite_byteTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_byteTmpl,
		"go/write/write_byte.tmpl",
	)
}

func goWriteWrite_byteTmpl() (*asset, error) {
	bytes, err := goWriteWrite_byteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_byte.tmpl", size: 34, mode: os.FileMode(438), modTime: time.Unix(1469596094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_float32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x36\xd2\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\x10\x66\x21\x24\x15\xb4\x15\x0c\xb1\x28\x50\xb0\xb3\x53\xb0\x40\x51\x65\x84\x43\x95\xa1\x19\x8a\x32\x63\x1c\xca\x8c\x4c\x80\xca\xc0\x4a\x6c\x15\x4c\x00\x01\x00\x00\xff\xff\x12\xc3\x21\xb1\xd5\x00\x00\x00")

func goWriteWrite_float32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_float32Tmpl,
		"go/write/write_float32.tmpl",
	)
}

func goWriteWrite_float32Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_float32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_float32.tmpl", size: 213, mode: os.FileMode(438), modTime: time.Unix(1469592147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_float64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\xd0\xd2\xd0\x2a\xcd\xcc\x2b\x31\x33\xd1\xd4\x28\xcd\x2b\x4e\x4c\x4b\xd5\x0b\xc8\x07\xf2\x53\x8b\x34\xd4\x34\x8a\x92\xcb\xf4\xe0\x8a\x35\x35\x35\x79\xb9\x92\x4a\xd3\xa2\xf3\xd3\xd2\x62\x15\x6c\x15\x92\x2a\x4b\x52\x35\x10\x66\x21\x24\x15\xb4\x15\x0c\xb1\x28\x50\xb0\xb3\x53\xb0\x40\x51\x65\x84\x43\x95\xa1\x19\x8a\x32\x63\x1c\xca\x8c\x4c\x50\x94\x99\xe0\x50\x66\x6c\x84\xa2\xcc\x14\x87\x32\x13\x03\x14\x65\x66\xb8\x94\xa1\x7a\xc1\x1c\x87\x32\x53\x90\x17\xc0\x4a\x6c\x15\x2c\x00\x01\x00\x00\xff\xff\x4c\x01\x5b\x05\x71\x01\x00\x00")

func goWriteWrite_float64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_float64Tmpl,
		"go/write/write_float64.tmpl",
	)
}

func goWriteWrite_float64Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_float64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_float64.tmpl", size: 369, mode: os.FileMode(438), modTime: time.Unix(1469658672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_intTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWriteWrite_intTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_intTmpl,
		"go/write/write_int.tmpl",
	)
}

func goWriteWrite_intTmpl() (*asset, error) {
	bytes, err := goWriteWrite_intTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_int.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_int16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWriteWrite_int16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_int16Tmpl,
		"go/write/write_int16.tmpl",
	)
}

func goWriteWrite_int16Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_int16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_int16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_int32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWriteWrite_int32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_int32Tmpl,
		"go/write/write_int32.tmpl",
	)
}

func goWriteWrite_int32Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_int32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_int32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_int64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWriteWrite_int64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_int64Tmpl,
		"go/write/write_int64.tmpl",
	)
}

func goWriteWrite_int64Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_int64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_int64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_int8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWriteWrite_int8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_int8Tmpl,
		"go/write/write_int8.tmpl",
	)
}

func goWriteWrite_int8Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_int8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_int8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_objectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4f\x4b\x53\xb0\x55\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xf3\x4d\x2c\x2a\xce\x48\xcc\x71\xca\x4f\xa9\xd4\x48\x2a\x4d\xd3\x51\x00\x2a\xd2\x04\x04\x00\x00\xff\xff\xbd\xd8\xbc\x47\x29\x00\x00\x00")

func goWriteWrite_objectTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_objectTmpl,
		"go/write/write_object.tmpl",
	)
}

func goWriteWrite_objectTmpl() (*asset, error) {
	bytes, err := goWriteWrite_objectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_object.tmpl", size: 41, mode: os.FileMode(438), modTime: time.Unix(1469766311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_object_indexedTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x8f\x31\x6b\x85\x30\x14\x85\xe7\xf7\xc0\xff\x70\xc6\x88\x25\x68\x87\x52\xda\x46\x68\xb7\x0e\xed\xe2\x28\x0e\x51\x13\x1a\x48\x23\x44\x2d\xd8\x90\xff\xde\x68\x40\x14\x3a\xbe\xf1\x24\xdf\xb9\xdf\xbd\xce\x29\x09\xfa\x3e\x56\x5a\x75\xc2\xfb\xe4\x7a\xd1\xc6\x39\xfa\xc9\xbf\x43\xc2\x13\xc3\xac\xcc\x54\x3c\x10\x2d\x0c\xb1\xdd\x0f\xdd\xff\xd2\x34\xb9\x02\x68\x67\x59\x0f\x52\x36\x60\x68\x97\x49\x90\x43\xfb\x04\x20\x43\xf1\x1f\x84\xb2\xc4\x63\x24\x37\x8a\xe1\x7e\x0b\x72\xb0\x50\x07\x7f\x9e\x3e\x87\xfc\x82\x43\x35\x3c\x64\x19\xdc\x86\x5f\xd6\x32\xc3\x69\xc3\x5a\x35\xf4\x83\xdb\xf1\x8b\xeb\xb7\xa1\x5f\x48\xd8\xe4\x6e\x95\x44\x5b\x38\xd5\x39\xa1\xc7\x78\xf4\xae\xcb\xa3\x26\x0c\x79\xb5\x96\x2f\x95\xfa\xbd\x91\xc9\xf4\xde\xff\x05\x00\x00\xff\xff\x57\xd9\x7a\xe6\x6d\x01\x00\x00")

func goWriteWrite_object_indexedTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_object_indexedTmpl,
		"go/write/write_object_indexed.tmpl",
	)
}

func goWriteWrite_object_indexedTmpl() (*asset, error) {
	bytes, err := goWriteWrite_object_indexedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_object_indexed.tmpl", size: 365, mode: os.FileMode(438), modTime: time.Unix(1469776978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_sliceTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xc9\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\x28\xcd\xcc\x2b\x31\x34\xd3\xc8\x49\xcd\xd3\x28\x4a\x2e\xd3\x83\xcb\x69\x6a\xf2\x72\x25\x95\xa6\x45\xe7\xa7\xa5\xc5\x2a\xd8\x2a\x24\x55\x96\xa4\x6a\x20\x69\x45\xc8\x2a\x68\x2b\x18\x62\x53\xa1\x60\x67\xa7\x60\x01\x54\x06\x56\x62\xab\x60\xc4\xcb\x95\x96\x5f\xa4\x90\x89\x64\xa7\x81\xa6\x35\x90\x6f\xa3\x80\xa4\x09\x28\xa0\xad\xad\x50\xcd\xcb\xc5\x59\x5d\x5d\x5e\x94\x59\x92\xea\x58\x54\x94\x58\xe9\x99\x97\x92\x5a\xa1\xa0\x57\x5b\xcb\xcb\x55\x0b\x08\x00\x00\xff\xff\x4c\xf1\xc3\x9a\xbf\x00\x00\x00")

func goWriteWrite_sliceTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_sliceTmpl,
		"go/write/write_slice.tmpl",
	)
}

func goWriteWrite_sliceTmpl() (*asset, error) {
	bytes, err := goWriteWrite_sliceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_slice.tmpl", size: 191, mode: os.FileMode(438), modTime: time.Unix(1469763164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_stringTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xa9\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xb0\xb2\x55\x88\x8e\x4d\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\x83\x8b\x6b\xf2\x72\xe5\xa1\x28\xca\x49\xcd\xd3\x48\x41\x96\x4e\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x00\x6b\xcf\xc3\x22\xa9\xa0\xad\x60\x88\x45\x81\x82\x9d\x9d\x82\x05\x50\x15\x58\x85\xad\x82\x11\x2f\x57\x72\x7e\x41\xa5\x06\x54\x93\x55\xac\x8e\x02\x8a\x4d\x50\x65\x08\xfd\x80\x00\x00\x00\xff\xff\xeb\x4c\x27\x46\xbf\x00\x00\x00")

func goWriteWrite_stringTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_stringTmpl,
		"go/write/write_string.tmpl",
	)
}

func goWriteWrite_stringTmpl() (*asset, error) {
	bytes, err := goWriteWrite_stringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_string.tmpl", size: 191, mode: os.FileMode(438), modTime: time.Unix(1469791070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_uintTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWriteWrite_uintTmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_uintTmpl,
		"go/write/write_uint.tmpl",
	)
}

func goWriteWrite_uintTmpl() (*asset, error) {
	bytes, err := goWriteWrite_uintTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_uint.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_uint16Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x01\x54\x08\x56\x64\xab\x60\x04\x08\x00\x00\xff\xff\xf3\x8f\x61\x17\x51\x00\x00\x00")

func goWriteWrite_uint16TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_uint16Tmpl,
		"go/write/write_uint16.tmpl",
	)
}

func goWriteWrite_uint16Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_uint16TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_uint16.tmpl", size: 81, mode: os.FileMode(438), modTime: time.Unix(1469592119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_uint32Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\x00\x55\x82\x55\xd9\x2a\x98\x00\x02\x00\x00\xff\xff\xf4\x5f\xfb\xf2\xa5\x00\x00\x00")

func goWriteWrite_uint32TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_uint32Tmpl,
		"go/write/write_uint32.tmpl",
	)
}

func goWriteWrite_uint32Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_uint32TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_uint32.tmpl", size: 165, mode: os.FileMode(438), modTime: time.Unix(1469592126, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_uint64Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x82\xca\x2b\x68\x2b\x18\x62\x57\xa3\x60\x67\xa7\x60\x81\xa2\xd0\x08\xb7\x42\x43\x33\x14\x95\xc6\xb8\x55\x1a\x99\xa0\xa8\x34\xc1\xad\xd2\xd8\x08\x45\xa5\x29\x6e\x95\x26\x06\x28\x2a\xcd\xf0\xa8\x44\xf5\x91\x39\x6e\x95\xa6\x20\x1f\x81\x55\xd9\x2a\x58\x00\x02\x00\x00\xff\xff\xfa\xf4\x79\x10\x4d\x01\x00\x00")

func goWriteWrite_uint64TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_uint64Tmpl,
		"go/write/write_uint64.tmpl",
	)
}

func goWriteWrite_uint64Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_uint64TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_uint64.tmpl", size: 333, mode: os.FileMode(438), modTime: time.Unix(1469592133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goWriteWrite_uint8Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2a\x4d\x8b\xce\x4f\x4b\x8b\x55\xb0\x55\x48\xaa\x2c\x49\xd5\x28\x4a\x2e\xd3\xab\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xd5\xe4\xe5\x02\xca\x29\x68\xdb\x2a\x18\x02\x02\x00\x00\xff\xff\x39\xfa\x69\x49\x28\x00\x00\x00")

func goWriteWrite_uint8TmplBytes() ([]byte, error) {
	return bindataRead(
		_goWriteWrite_uint8Tmpl,
		"go/write/write_uint8.tmpl",
	)
}

func goWriteWrite_uint8Tmpl() (*asset, error) {
	bytes, err := goWriteWrite_uint8TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go/write/write_uint8.tmpl", size: 40, mode: os.FileMode(438), modTime: time.Unix(1469592109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go/array_index.tmpl": goArray_indexTmpl,
	"go/doc.tmpl": goDocTmpl,
	"go/object.tmpl": goObjectTmpl,
	"go/objects.tmpl": goObjectsTmpl,
	"go/read/read_array.tmpl": goReadRead_arrayTmpl,
	"go/read/read_bool.tmpl": goReadRead_boolTmpl,
	"go/read/read_byte.tmpl": goReadRead_byteTmpl,
	"go/read/read_float32.tmpl": goReadRead_float32Tmpl,
	"go/read/read_float64.tmpl": goReadRead_float64Tmpl,
	"go/read/read_int.tmpl": goReadRead_intTmpl,
	"go/read/read_int16.tmpl": goReadRead_int16Tmpl,
	"go/read/read_int32.tmpl": goReadRead_int32Tmpl,
	"go/read/read_int64.tmpl": goReadRead_int64Tmpl,
	"go/read/read_int8.tmpl": goReadRead_int8Tmpl,
	"go/read/read_object.tmpl": goReadRead_objectTmpl,
	"go/read/read_object_indexed.tmpl": goReadRead_object_indexedTmpl,
	"go/read/read_slice.tmpl": goReadRead_sliceTmpl,
	"go/read/read_string.tmpl": goReadRead_stringTmpl,
	"go/read/read_uint.tmpl": goReadRead_uintTmpl,
	"go/read/read_uint16.tmpl": goReadRead_uint16Tmpl,
	"go/read/read_uint32.tmpl": goReadRead_uint32Tmpl,
	"go/read/read_uint64.tmpl": goReadRead_uint64Tmpl,
	"go/read/read_uint8.tmpl": goReadRead_uint8Tmpl,
	"go/write/write_array.tmpl": goWriteWrite_arrayTmpl,
	"go/write/write_bool.tmpl": goWriteWrite_boolTmpl,
	"go/write/write_byte.tmpl": goWriteWrite_byteTmpl,
	"go/write/write_float32.tmpl": goWriteWrite_float32Tmpl,
	"go/write/write_float64.tmpl": goWriteWrite_float64Tmpl,
	"go/write/write_int.tmpl": goWriteWrite_intTmpl,
	"go/write/write_int16.tmpl": goWriteWrite_int16Tmpl,
	"go/write/write_int32.tmpl": goWriteWrite_int32Tmpl,
	"go/write/write_int64.tmpl": goWriteWrite_int64Tmpl,
	"go/write/write_int8.tmpl": goWriteWrite_int8Tmpl,
	"go/write/write_object.tmpl": goWriteWrite_objectTmpl,
	"go/write/write_object_indexed.tmpl": goWriteWrite_object_indexedTmpl,
	"go/write/write_slice.tmpl": goWriteWrite_sliceTmpl,
	"go/write/write_string.tmpl": goWriteWrite_stringTmpl,
	"go/write/write_uint.tmpl": goWriteWrite_uintTmpl,
	"go/write/write_uint16.tmpl": goWriteWrite_uint16Tmpl,
	"go/write/write_uint32.tmpl": goWriteWrite_uint32Tmpl,
	"go/write/write_uint64.tmpl": goWriteWrite_uint64Tmpl,
	"go/write/write_uint8.tmpl": goWriteWrite_uint8Tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go": &bintree{nil, map[string]*bintree{
		"array_index.tmpl": &bintree{goArray_indexTmpl, map[string]*bintree{}},
		"doc.tmpl": &bintree{goDocTmpl, map[string]*bintree{}},
		"object.tmpl": &bintree{goObjectTmpl, map[string]*bintree{}},
		"objects.tmpl": &bintree{goObjectsTmpl, map[string]*bintree{}},
		"read": &bintree{nil, map[string]*bintree{
			"read_array.tmpl": &bintree{goReadRead_arrayTmpl, map[string]*bintree{}},
			"read_bool.tmpl": &bintree{goReadRead_boolTmpl, map[string]*bintree{}},
			"read_byte.tmpl": &bintree{goReadRead_byteTmpl, map[string]*bintree{}},
			"read_float32.tmpl": &bintree{goReadRead_float32Tmpl, map[string]*bintree{}},
			"read_float64.tmpl": &bintree{goReadRead_float64Tmpl, map[string]*bintree{}},
			"read_int.tmpl": &bintree{goReadRead_intTmpl, map[string]*bintree{}},
			"read_int16.tmpl": &bintree{goReadRead_int16Tmpl, map[string]*bintree{}},
			"read_int32.tmpl": &bintree{goReadRead_int32Tmpl, map[string]*bintree{}},
			"read_int64.tmpl": &bintree{goReadRead_int64Tmpl, map[string]*bintree{}},
			"read_int8.tmpl": &bintree{goReadRead_int8Tmpl, map[string]*bintree{}},
			"read_object.tmpl": &bintree{goReadRead_objectTmpl, map[string]*bintree{}},
			"read_object_indexed.tmpl": &bintree{goReadRead_object_indexedTmpl, map[string]*bintree{}},
			"read_slice.tmpl": &bintree{goReadRead_sliceTmpl, map[string]*bintree{}},
			"read_string.tmpl": &bintree{goReadRead_stringTmpl, map[string]*bintree{}},
			"read_uint.tmpl": &bintree{goReadRead_uintTmpl, map[string]*bintree{}},
			"read_uint16.tmpl": &bintree{goReadRead_uint16Tmpl, map[string]*bintree{}},
			"read_uint32.tmpl": &bintree{goReadRead_uint32Tmpl, map[string]*bintree{}},
			"read_uint64.tmpl": &bintree{goReadRead_uint64Tmpl, map[string]*bintree{}},
			"read_uint8.tmpl": &bintree{goReadRead_uint8Tmpl, map[string]*bintree{}},
		}},
		"write": &bintree{nil, map[string]*bintree{
			"write_array.tmpl": &bintree{goWriteWrite_arrayTmpl, map[string]*bintree{}},
			"write_bool.tmpl": &bintree{goWriteWrite_boolTmpl, map[string]*bintree{}},
			"write_byte.tmpl": &bintree{goWriteWrite_byteTmpl, map[string]*bintree{}},
			"write_float32.tmpl": &bintree{goWriteWrite_float32Tmpl, map[string]*bintree{}},
			"write_float64.tmpl": &bintree{goWriteWrite_float64Tmpl, map[string]*bintree{}},
			"write_int.tmpl": &bintree{goWriteWrite_intTmpl, map[string]*bintree{}},
			"write_int16.tmpl": &bintree{goWriteWrite_int16Tmpl, map[string]*bintree{}},
			"write_int32.tmpl": &bintree{goWriteWrite_int32Tmpl, map[string]*bintree{}},
			"write_int64.tmpl": &bintree{goWriteWrite_int64Tmpl, map[string]*bintree{}},
			"write_int8.tmpl": &bintree{goWriteWrite_int8Tmpl, map[string]*bintree{}},
			"write_object.tmpl": &bintree{goWriteWrite_objectTmpl, map[string]*bintree{}},
			"write_object_indexed.tmpl": &bintree{goWriteWrite_object_indexedTmpl, map[string]*bintree{}},
			"write_slice.tmpl": &bintree{goWriteWrite_sliceTmpl, map[string]*bintree{}},
			"write_string.tmpl": &bintree{goWriteWrite_stringTmpl, map[string]*bintree{}},
			"write_uint.tmpl": &bintree{goWriteWrite_uintTmpl, map[string]*bintree{}},
			"write_uint16.tmpl": &bintree{goWriteWrite_uint16Tmpl, map[string]*bintree{}},
			"write_uint32.tmpl": &bintree{goWriteWrite_uint32Tmpl, map[string]*bintree{}},
			"write_uint64.tmpl": &bintree{goWriteWrite_uint64Tmpl, map[string]*bintree{}},
			"write_uint8.tmpl": &bintree{goWriteWrite_uint8Tmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

