type {{.Name}} struct {
	{{- range .Fields}}
	{{- if .IsArray}}
		{{.Name}} [{{.ArraySize}}]{{if .IsObject}}*{{end}}{{.Type}}
	{{- else if .IsSlice}}
		{{.Name}} []{{if .IsObject}}*{{end}}{{.Type}}
	{{- else if .IsObject}}
   	{{.Name}} *{{.Type}}
	{{- else}}
		{{.Name}} {{.Type}}
	{{- end}}
	{{- end}}
}
func (rcv *{{.Name}}) Id() uint16 {
	return {{.Id}}
}
func (rcv *{{.Name}}) Size() int {
	size := 0
	{{- range .Fields}}
	{{- if .IsArray}}
		{{if .IsObject}}
			for i := 0; i < {{.ArraySize}}; i++ {
				size += rcv.{{.Name}}[i].Size()
			}
		{{else if eq .Type "string"}}
			for i := 0; i < {{.ArraySize}}; i++ {
				size += len(rcv.{{.Name}}[i]) + 2
			}
		{{else}}
			size += {{.ArraySize}} * {{baseSizeOf .}}
		{{end}}
	{{else if .IsSlice}}
		size += 2
		{{if .IsObject}}
			for i := 0; i < {{.ArraySize}}; i++ {
				size += rcv.{{.Name}}[i].Size()
			}
		{{else if eq .Type "string"}}
			for i := 0; i < {{.ArraySize}}; i++ {
				size += len(rcv.{{.Name}}[i]) + 2
			}
		{{else}}
			size += {{.ArraySize}} * {{baseSizeOf .}}
		{{end}}
	{{else if .IsObject}}
		size += rcv.{{.Name}}.Size()
	{{else if eq .Type "string"}}
		size += len(rcv.{{.Name}}) + 2
	{{else}}
		size += {{baseSizeOf .}}
	{{- end}}
	{{- end}}
	return size
}
func (rcv *{{.Name}}) IsVariableSize() bool {
	return {{- if .IsVariableSize}} true {{else}} false {{- end}}
}
func (rcv *{{.Name}}) MarshalBody(buf []byte, off int) int {
	{{- range .Fields}}
	{{write .}}
	{{- end}}
	return off
}
func (rcv *{{.Name}}) UnmarshalBody(buf []byte, off int) int {
	{{- range .Fields}}
	{{read .}}
	{{- end}}
	return off
}
func (rcv *{{.Name}}) Reset() {
	*rcv = {{.Name}}{}
}
func New{{.Name}}({{$params := .Fields}}{{range $index, $element := .Fields}}{{if $index}},{{end}}{{$element.CamelCase}} {{if .IsSlice}}[]{{else if .IsArray}}[{{.ArraySize}}]{{end}} {{if $element.IsObject}}*{{end}}{{$element.Type}}{{end}}) *{{.Name}} {
	return &{{.Name}}{
		{{- range .Fields}}
		{{.Name}}: {{.CamelCase}},
		{{- end}}
	}
}